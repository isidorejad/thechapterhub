import axios from 'axios';



const API = axios.create({

    baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',

    headers: {

        'Content-Type': 'application/json',

    },

});



API.interceptors.request.use(

    (config) => {

        const token = localStorage.getItem('token');

        if (token) {

            config.headers.Authorization = `Bearer ${token}`;

        }

        return config;

    },

    (error) => {

        return Promise.reject(error);

    }

);



API.interceptors.response.use(

    (response) => response,

    (error) => {

        if (error.response && error.response.status === 401) {

            console.error('Unauthorized access - redirecting to login');

            localStorage.removeItem('token');

            window.location.href = '/login';

        }



        // Backend errors will be caught here and propagate to the calling function.

        if (error.response && error.response.data) {

            return Promise.reject(error.response.data);

        }



        return Promise.reject(error);

    }

);



export default API;



import api from '../utils/api';



const authService = {

    /**

     * Sends a login request to the backend.

     * @param {string} email - User's email.

     * @param {string} password - User's password.

     * @returns {Promise<object>} - Response data including user info and token.

     */

    login: async (email, password) => {

        try {

            const response = await api.post('/login', { email, password });

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            // Error object from backend will be directly rejected by api.js interceptor

            return {

                success: false,

                error: error || { message: 'Login failed' } // Use error directly

            };

        }

    },



    /**

     * Sends a registration request to the backend.

     * @param {object} userData - User registration data.

     * @returns {Promise<object>} - Response data including new user info and token.

     */

    register: async (userData) => {

        try {

            const response = await api.post('/register', userData);

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Registration failed' }

            };

        }

    },



    /**

     * Verifies user's email with the provided token.

     * @param {string} token - Verification token.

     * @returns {Promise<object>} - Response data.

     */

    verifyEmail: async (token) => {

        try {

            const response = await api.post('/verify-email', { token });

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Email verification failed' }

            };

        }

    },



    /**

     * Resends verification email to the provided email address.

     * @param {string} email - User's email.

     * @returns {Promise<object>} - Response data.

     */

    resendVerification: async (email) => {

        try {

            const response = await api.post('/resend-verification', { email });

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Failed to resend verification email' }

            };

        }

    },



    /**

     * Initiates password reset process.

     * @param {string} email - User's email.

     * @returns {Promise<object>} - Response data.

     */

    forgotPassword: async (email) => {

        try {

            const response = await api.post('/forgot-password', { email });

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Password reset failed' }

            };

        }

    },



    /**

     * Resets user's password with the provided token and new password.

     * @param {string} token - Password reset token.

     * @param {string} newPassword - New password.

     * @param {string} confirmPassword - Password confirmation.

     * @returns {Promise<object>} - Response data.

     */

    resetPassword: async (token, newPassword, confirmPassword) => {

        try {

            const response = await api.post('/reset-password', { token, newPassword, confirmPassword });

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Password reset failed' }

            };

        }

    },



    /**

     * Fetches the authenticated user's profile.

     * Requires a valid token in localStorage.

     * @returns {Promise<object>} - User profile data.

     */

    getProfile: async () => {

        try {

            const response = await api.get('/profile');

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Failed to fetch profile' }

            };

        }

    },



    /**

     * Updates user's profile.

     * @param {object} profileData - Profile data to update.

     * @returns {Promise<object>} - Updated profile data.

     */

    updateProfile: async (profileData) => {

        try {

            const response = await api.put('/profile', profileData);

            return {

                success: true,

                data: response.data

            };

        } catch (error) {

            return {

                success: false,

                error: error || { message: 'Failed to update profile' }

            };

        }

    }

};



export default authService;



// frontend/src/services/bookmarkService.js

import api from '../utils/api';



const bookmarkService = {

    /**

     * Toggles the bookmark status for a story.

     * @param {string} storyId - The ID of the story to bookmark/unbookmark.

     * @returns {Promise<object>} - Object with `bookmarked` boolean.

     */

    toggleBookmark: async (storyId) => {

        const response = await api.post(`/stories/${storyId}/toggle-bookmark`);

        return response.data;

    },

};



export default bookmarkService;



// frontend/src/services/commentService.js

import api from '../utils/api';



const commentService = {

    /**

     * Adds a new comment to a story.

     * @param {string} storyId - The ID of the story to comment on.

     * @param {string} commentText - The comment content.

     * @param {string|null} parentId - Optional ID of the parent comment for replies.

     * @returns {Promise<object>} - Confirmation message.

     */

    addComment: async (storyId, commentText, parentId = null) => {

        // Backend expects 'story' and 'user' as ObjectIds, which it receives from storyId and req.user._id.

        // It also expects 'parent_comment' for replies.

        const response = await api.post(`/stories/${storyId}/comments`, {

            comment: commentText,

            parent_id: parentId, // This maps to parent_comment on the backend

        });

        return response.data;

    },



    /**

     * Deletes a comment.

     * @param {string} commentId - The ID of the comment to delete.

     * @returns {Promise<object>} - Confirmation message.

     */

    deleteComment: async (commentId) => {

        const response = await api.delete(`/comments/${commentId}`);

        return response.data;

    },

};



export default commentService;



// frontend/src/services/episodeService.js

import api from '../utils/api';



const episodeService = {

    /**

     * Fetches a single episode by its story ID and episode ID.

     * @param {string} storyId - The ID of the parent story.

     * @param {string} episodeId - The ID of the episode.

     * @returns {Promise<object>} - Episode details, along with next/previous episode info.

     */

    getEpisodeById: async (storyId, episodeId) => {

        const response = await api.get(`/stories/${storyId}/episodes/${episodeId}`);

        return response.data;

    },



    /**

     * Fetches data needed for the episode creation form (story details, next episode order).

     * @param {string} storyId - The ID of the parent story.

     * @returns {Promise<object>} - Story data and next episode order.

     */

    getEpisodeCreationData: async (storyId) => {

        const response = await api.get(`/stories/${storyId}/episodes/create-info`);

        return response.data;

    },



    /**

     * Creates a new episode for a story.

     * @param {string} storyId - The ID of the parent story.

     * @param {object} episodeData - Data for the new episode.

     * @returns {Promise<object>} - Created episode data.

     */

    createEpisode: async (storyId, episodeData) => {

        const response = await api.post(`/stories/${storyId}/episodes`, episodeData);

        return response.data;

    },



    /**

     * Fetches data needed for the episode edit form (story details, episode details).

     * @param {string} storyId - The ID of the parent story.

     * @param {string} episodeId - The ID of the episode to edit.

     * @returns {Promise<object>} - Story and episode data for editing.

     */

    getEpisodeEditData: async (storyId, episodeId) => {

        const response = await api.get(`/stories/${storyId}/episodes/${episodeId}/edit-info`);

        return response.data;

    },



    /**

     * Updates an existing episode.

     * @param {string} storyId - The ID of the parent story.

     * @param {string} episodeId - The ID of the episode to update.

     * @param {object} episodeData - Updated data for the episode.

     * @returns {Promise<object>} - Updated episode data.

     */

    updateEpisode: async (storyId, episodeId, episodeData) => {

        const response = await api.put(`/stories/${storyId}/episodes/${episodeId}`, episodeData);

        return response.data;

    },



    /**

     * Deletes an episode.

     * @param {string} storyId - The ID of the parent story.

     * @param {string} episodeId - The ID of the episode to delete.

     * @returns {Promise<object>} - Confirmation message.

     */

    deleteEpisode: async (storyId, episodeId) => {

        const response = await api.delete(`/stories/${storyId}/episodes/${episodeId}`);

        return response.data;

    },

};



export default episodeService;



// frontend/src/services/followService.js

import api from '../utils/api';



const followService = {

    /**

     * Toggles the follow status for a user.

     * @param {string} userId - The ID of the user to follow/unfollow.

     * @returns {Promise<object>} - Object with `following` boolean and `count` of followers.

     */

    toggleFollow: async (userId) => {

        const response = await api.post(`/users/${userId}/toggle-follow`);

        return response.data;

    },

};



export default followService;



// frontend/src/services/genreService.js

import api from '../utils/api';



const genreService = {

    /**

     * Fetches a list of all genres.

     * @returns {Promise<object[]>} - Array of genre objects.

     */

    getAllGenres: async () => {

        const response = await api.get('/genres');

        // Backend now returns an array of plain objects with 'id'

        return response.data;

    },



    /**

     * Fetches a single genre by its slug and associated stories.

     * @param {string} genreSlug - The slug of the genre.

     * @returns {Promise<object>} - Genre details and associated stories.

     */

    getGenreBySlug: async (genreSlug) => {

        const response = await api.get(`/genres/${genreSlug}`);

        // Backend now returns an object with 'genre' field

        return response.data;

    },

};



export default genreService;



// frontend/src/services/likeService.js

import api from '../utils/api';



const likeService = {

    /**

     * Toggles the like status for a story.

     * @param {string} storyId - The ID of the story to like/unlike.

     * @returns {Promise<object>} - Object with `liked` boolean and `count` of likes.

     */

    toggleLike: async (storyId) => {

        const response = await api.post(`/stories/${storyId}/toggle-like`);

        return response.data;

    },

};



export default likeService;



// frontend/src/services/readingProgressService.js

import api from '../utils/api';



const readingProgressService = {

    /**

     * Marks an episode as read for the current user.

     * @param {string} episodeId - The ID of the episode to mark as read.

     * @returns {Promise<object>} - Success status.

     */

    markAsRead: async (episodeId) => {

        const response = await api.post(`/episodes/${episodeId}/mark-as-read`);

        return response.data;

    },

};



export default readingProgressService;



// frontend/src/services/shareService.js

import api from '../utils/api';



const shareService = {

    /**

     * Shares a story on a specified platform.

     * @param {string} storyId - The ID of the story to share.

     * @param {string} platform - The platform (e.g., 'twitter', 'facebook').

     * @returns {Promise<object>} - Object with share URL.

     */

    shareStory: async (storyId, platform) => {

        const response = await api.post(`/stories/${storyId}/share/${platform}`);

        return response.data;

    },



    /**

     * Shares an episode on a specified platform.

     * @param {string} storyId - The ID of the parent story.

     * @param {string} episodeId - The ID of the episode to share.

     * @param {string} platform - The platform (e.g., 'twitter', 'facebook').

     * @returns {Promise<object>} - Object with share URL.

     */

    shareEpisode: async (storyId, episodeId, platform) => {

        const response = await api.post(`/stories/${storyId}/episodes/${episodeId}/share/${platform}`);

        return response.data;

    },

};



export default shareService;



// frontend/src/services/storyPurchaseService.js

import api from '../utils/api';



const storyPurchaseService = {

    /**

     * Initiates the purchase of a story.

     * @param {string} storyId - The ID of the story to purchase.

     * @returns {Promise<object>} - Success status and message.

     */

    purchaseStory: async (storyId) => {

        const response = await api.post(`/stories/${storyId}/purchase`);

        return response.data;

    },

};



export default storyPurchaseService;



import api from '../utils/api';



const storyService = {

    getStories: async (params) => {

        try {

            const response = await api.get('/stories', { params });

            // Backend now returns { stories, genres, warnings, currentPage, totalPages, totalItems }

            return response.data;

        } catch (error) {

            console.error('Error fetching stories:', error);

            throw error; // Re-throw to be caught by component

        }

    },



    getStoryById: async (storyId) => {

        try {

            const response = await api.get(`/stories/${storyId}`);

            // Backend now returns { success, story, isLiked, bookmarked, readingProgress, requiresPurchase }

            return response.data;

        } catch (error) {

            console.error('Error fetching story:', error);

            // Re-throw the full error to allow component to handle specific error codes (e.g., 403 for premium)

            throw error;

        }

    },



    getStoryCreationData: async () => {

        try {

            const response = await api.get('/stories/create/data');

            // Backend returns { success, genres, warnings }

            return response.data;

        } catch (error) {

            console.error('Error fetching creation data:', error);

            throw error;

        }

    },



    createStory: async (formData) => {

        try {

            // formData is already a FormData object, axios handles Content-Type automatically

            const response = await api.post('/stories', formData, {

                headers: {

                    'Content-Type': 'multipart/form-data' // Explicitly set, though axios often infers

                }

            });

            // Backend returns { success, message, story }

            return response.data;

        } catch (error) {

            console.error('Error creating story:', error);

            throw error;

        }

    },



    getStoryEditData: async (storyId) => {

        try {

            const response = await api.get(`/stories/${storyId}/edit-info`);

            // Backend returns { story, genres, warnings, selectedWarnings }

            return response.data;

        } catch (error) {

            console.error('Error fetching edit data:', error);

            throw error;

        }

    },



    updateStory: async (storyId, formData) => {

        try {

            // formData is already a FormData object

            const response = await api.put(`/stories/${storyId}`, formData, {

                headers: {

                    'Content-Type': 'multipart/form-data'

                }

            });

            // Backend returns { success, message, story }

            return response.data;

        } catch (error) {

            console.error('Error updating story:', error);

            throw error;

        }

    },



    deleteStory: async (storyId) => {

        try {

            const response = await api.delete(`/stories/${storyId}`);

            return response.data;

        } catch (error) {

            console.error('Error deleting story:', error);

            throw error;

        }

    }

};



export default storyService;



// frontend/src/services/tokenTransactionService.js

import api from '../utils/api';



const tokenTransactionService = {

    /**

     * Fetches the current user's token transaction history.

     * @param {object} params - Query parameters (page, limit).

     * @returns {Promise<object>} - Paginated list of transactions.

     */

    getTokenTransactions: async (params) => {

        const response = await api.get('/tokens/transactions', { params });

        // Backend returns { transactions, currentPage, totalPages, totalItems }

        return response.data;

    },



    /**

     * Fetches information needed for the token purchase page (packages, payment methods).

     * @returns {Promise<object>} - Token packages and user's payment methods.

     */

    getTokenPurchaseInfo: async () => {

        const response = await api.get('/tokens/purchase-info');

        // Backend returns { packages, paymentMethods }

        return response.data;

    },



    /**

     * Initiates a token purchase.

     * @param {string} packageName - The name of the token package (e.g., 'small', 'medium').

     * @param {string} paymentMethodId - The ID of the payment method to use.

     * @returns {Promise<object>} - Success status and message.

     */

    purchaseTokens: async (packageName, paymentMethodId) => {

        // paymentMethodId is an ObjectId string, which the backend will convert to ObjectId

        const response = await api.post('/tokens/purchase', {

            package: packageName,

            payment_method_id: paymentMethodId,

        });

        return response.data;

    },

};



export default tokenTransactionService;



import React from 'react';

import { useState } from 'react';

import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';

import { AuthProvider, useAuth } from './context/AuthContext';



// Layouts

import AppLayout from './layouts/AppLayout';

import AuthLayout from './layouts/AuthLayout';

import UserDashboardLayout from './layouts/UserDashboardLayout';



// Auth Pages

import Login from './pages/auth/Login';

import Register from './pages/auth/Register';

import VerifyEmail from './pages/auth/VerifyEmail';

import ForgotPassword from './pages/auth/ForgotPassword';

import ResetPassword from './pages/auth/ResetPassword';



// Public Pages

import StoryList from './pages/stories/StoryList';

import StoryDetail from './pages/stories/StoryDetail';

import EpisodeDetail from './pages/episodes/EpisodeDetail';

import GenreList from './pages/genres/GenreList';

import GenreDetail from './pages/genres/GenreDetail';

import AboutUs from './pages/AboutUs';

import ContactUs from './pages/ContactUs';

import Pricing from './pages/Pricing';

import Careers from './pages/Careers';

import Blogs from './pages/Blogs';

import PrivacyPolicy from './pages/PrivacyPolicy';

import TermsOfService from './pages/TermsOfService';

import CookiePolicy from './pages/CookiePolicy';



// Error Pages

import NotFound from './pages/NotFound';

 



// Authenticated Pages

import Dashboard from './pages/user/Dashboard'; // This will be rendered inside UserDashboardLayout

import Library from './pages/user/Library';

import Profile from './pages/user/Profile';

import Settings from './pages/user/Settings';

import TransactionList from './pages/transactions/TransactionList';

import TransactionDetail from './pages/transactions/TransactionDetail';



// Writer/Admin Specific Pages

import StoryCreate from './pages/stories/StoryCreate';

import StoryEdit from './pages/stories/StoryEdit';

import EpisodeCreate from './pages/episodes/EpisodeCreate';

import EpisodeEdit from './pages/episodes/EpisodeEdit';



// Loading Component

import LoadingSpinner from './components/LoadingSpinner';

import Alert from './components/Alert'; // Assuming you have an Alert component for displaying messages

import Pagination from './components/Pagination';

import StoryCard from './components/StoryCard';



// Private Route Component to protect routes

const PrivateRoute = ({ children, roles }) => {

    const { isAuthenticated, loading, user } = useAuth();

    const location = window.location.pathname; // Get current path



    if (loading) {

        return <LoadingSpinner fullScreen />;

    }



    if (!isAuthenticated) {

        return <Navigate to="/login" replace />;

    }



    // Allow access to verification routes even if not verified

    const isVerificationRoute = location.includes('/verify-email') || location.includes('/verify-email-prompt');



    // Check if email is verified, redirect if not and it's not a verification route

    if (!user?.is_verified && !isVerificationRoute) {

        return <Navigate to="/verify-email-prompt" replace />;

    }



    // Check if user has the required role(s)

    if (roles && roles.length > 0 && !roles.includes(user?.role)) {

        return <Navigate to="/unauthorized" replace />;

    }



    return children;

};



// Component to prompt email verification

const VerifyEmailPrompt = () => {

    const { user, resendVerificationEmail } = useAuth();

    const [message, setMessage] = useState('');

    const [messageType, setMessageType] = useState('');

    const [resending, setResending] = useState(false);



    const handleResend = async () => {

        setResending(true);

        setMessage('');

        const result = await resendVerificationEmail(user?.email);

        if (result.success) {

            setMessage(result.message);

            setMessageType('success');

        } else {

            setMessage(result.message);

            setMessageType('error');

        }

        setResending(false);

    };



    return (

        <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50">

            <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                <h2 className="text-2xl font-bold text-center text-gray-800 mb-4">Email Verification Required</h2>

                <p className="text-gray-600 mb-6">

                    Please verify your email address ({user?.email}) to access all features.

                    Check your inbox for the verification email.

                </p>

                {message && <Alert type={messageType} message={message} />}

                <div className="flex flex-col space-y-3">

                    <button

                        onClick={() => window.location.reload()} // Reload to re-check verification status

                        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"

                    >

                        I've Verified My Email (Reload)

                    </button>

                    <button

                        onClick={handleResend}

                        className="w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"

                        disabled={resending}

                    >

                        {resending ? 'Resending...' : 'Resend Verification Email'}

                    </button>

                </div>

            </div>

        </div>

    );

};





function App() {

    return (

        <Router>

            <AuthProvider>

                <Routes>

                    {/* Auth Routes - use AuthLayout for these */}

                    <Route path="/" element={<AuthLayout />}>

                        <Route path="login" element={<Login />} />

                        <Route path="register" element={<Register />} />

                        <Route path="verify-email" element={<VerifyEmail />} />

                        <Route path="forgot-password" element={<ForgotPassword />} />

                        <Route path="reset-password" element={<ResetPassword />} />

                    </Route>



                    {/* Authenticated User Dashboard Layout */}

                    <Route path="/" element={<UserDashboardLayout />}>

                        <Route path="dashboard" element={<PrivateRoute><Dashboard /></PrivateRoute>} />

                        <Route path="profile" element={<PrivateRoute><Profile /></PrivateRoute>} />

                        <Route path="library" element={<PrivateRoute><Library /></PrivateRoute>} />

                        <Route path="settings" element={<PrivateRoute><Settings /></PrivateRoute>} />

                        <Route path="transactions" element={<PrivateRoute><TransactionList /></PrivateRoute>} />

                        <Route path="transactions/:transactionId" element={<PrivateRoute><TransactionDetail /></PrivateRoute>} />



                        {/* Writer/Admin Specific Routes */}

                        <Route path="stories/create" element={<PrivateRoute roles={['writer', 'admin']}><StoryCreate /></PrivateRoute>} />

                        <Route path="stories/:storyId/edit" element={<PrivateRoute roles={['writer', 'admin']}><StoryEdit /></PrivateRoute>} />

                        <Route path="stories/:storyId/episodes/create" element={<PrivateRoute roles={['writer', 'admin']}><EpisodeCreate /></PrivateRoute>} />

                        <Route path="stories/:storyId/episodes/:episodeId/edit" element={<PrivateRoute roles={['writer', 'admin']}><EpisodeEdit /></PrivateRoute>} />

                    </Route>

                    {/* Public and Authenticated Routes - use AppLayout for these */}

                    <Route path="/" element={<AppLayout />}>

                        {/* Public Routes */}

                        <Route index element={<StoryList />} />

                        <Route path="stories" element={<StoryList />} />

                        <Route path="stories/:storyId" element={<StoryDetail />} />

                        <Route path="stories/:storyId/episodes/:episodeId" element={<EpisodeDetail />} />

                        <Route path="genres" element={<GenreList />} />

                        <Route path="genres/:genreSlug" element={<GenreDetail />} />

                        <Route path="about-us" element={<AboutUs />} />

                        <Route path="contact-us" element={<ContactUs />} />

                        <Route path="pricing" element={<Pricing />} />

                        <Route path="careers" element={<Careers />} />

                        <Route path="blogs" element={<Blogs />} />

                        <Route path="privacy-policy" element={<PrivacyPolicy />} />

                        <Route path="terms-of-service" element={<TermsOfService />} />

                        <Route path="cookie-policy" element={<CookiePolicy />} />

                        {/* Verification Prompt (Publicly accessible but triggered by PrivateRoute) */}

                        <Route path="verify-email-prompt" element={<VerifyEmailPrompt />} />

                        {/* Unauthorized Page */}

                        <Route path="unauthorized" element={

                            <div className="flex justify-center items-center h-screen bg-red-100 text-red-800 text-xl font-semibold">

                                You are not authorized to view this page.

                            </div>

                        } />



                        {/* Catch-all for undefined routes */}

                        <Route path="*" element={<Navigate to="/" replace />} />

                    </Route>

                </Routes>

            </AuthProvider>

        </Router>

    );

}



export default App;







// frontend/src/components/Alert.js

import React from 'react';



/**

 * Reusable Alert component for displaying messages.

 * @param {object} props - Component props.

 * @param {'success' | 'error' | 'info' | 'warning'} props.type - Type of alert.

 * @param {string} props.message - The message to display.

 * @param {function} [props.onClose] - Optional callback to close the alert.

 */

const Alert = ({ type, message, onClose }) => {

    if (!message) return null; // Don't render if there's no message



    let bgColor = '';

    let textColor = '';

    let borderColor = '';



    switch (type) {

        case 'success':

            bgColor = 'bg-green-100';

            textColor = 'text-green-800';

            borderColor = 'border-green-400';

            break;

        case 'error':

            bgColor = 'bg-red-100';

            textColor = 'text-red-800';

            borderColor = 'border-red-400';

            break;

        case 'info':

            bgColor = 'bg-blue-100';

            textColor = 'text-blue-800';

            borderColor = 'border-blue-400';

            break;

        case 'warning':

            bgColor = 'bg-yellow-100';

            textColor = 'text-yellow-800';

            borderColor = 'border-yellow-400';

            break;

        default:

            bgColor = 'bg-gray-100';

            textColor = 'text-gray-800';

            borderColor = 'border-gray-400';

    }



    return (

        <div

            className={`relative p-4 mb-4 rounded-lg shadow-md border ${bgColor} ${textColor} ${borderColor} flex items-center justify-between`}

            role="alert"

        >

            <p>{message}</p>

            {onClose && (

                <button

                    onClick={onClose}

                    className={`ml-4 p-1 rounded-full ${textColor} hover:bg-opacity-75 focus:outline-none focus:ring-2 focus:ring-offset-2`}

                    aria-label="Close"

                >

                    <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">

                        <path

                            fillRule="evenodd"

                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"

                            clipRule="evenodd"

                        ></path>

                    </svg>

                </button>

            )}

        </div>

    );

};



export default Alert;

import React from 'react';



const LoadingSpinner = ({ fullScreen = false }) => {

    return (

        <div className={`flex justify-center items-center ${fullScreen ? 'h-screen' : ''}`}>

            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>

        </div>

    );

};



export default LoadingSpinner;



// frontend/src/components/Pagination.js

import React from 'react';



/**

 * Reusable Pagination component.

 * @param {object} props - Component props.

 * @param {number} props.currentPage - The current active page.

 * @param {number} props.totalPages - The total number of pages.

 * @param {function} props.onPageChange - Callback function when a page is clicked.

 */

const Pagination = ({ currentPage, totalPages, onPageChange }) => {

    if (totalPages <= 1) {

        return null; // Don't render pagination if there's only one page or less

    }



    const pages = [];

    // Determine the range of pages to display (e.g., current page, +/- 2 pages, and first/last)

    const maxPagesToShow = 5; // Number of page buttons to display directly

    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));

    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);



    // Adjust startPage if we're near the end

    if (endPage - startPage + 1 < maxPagesToShow) {

        startPage = Math.max(1, endPage - maxPagesToShow + 1);

    }



    // Add first page and ellipsis if necessary

    if (startPage > 1) {

        pages.push(1);

        if (startPage > 2) {

            pages.push('...');

        }

    }



    // Add pages in the calculated range

    for (let i = startPage; i <= endPage; i++) {

        pages.push(i);

    }



    // Add ellipsis and last page if necessary

    if (endPage < totalPages) {

        if (endPage < totalPages - 1) {

            pages.push('...');

        }

        pages.push(totalPages);

    }



    return (

        <nav className="flex justify-center items-center space-x-2 mt-8">

            <button

                onClick={() => onPageChange(currentPage - 1)}

                disabled={currentPage === 1}

                className="px-4 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"

            >

                Previous

            </button>



            {pages.map((page, index) => (

                <React.Fragment key={index}>

                    {page === '...' ? (

                        <span className="px-4 py-2 text-gray-600">...</span>

                    ) : (

                        <button

                            onClick={() => onPageChange(page)}

                            className={`px-4 py-2 rounded-lg transition-all duration-200 ${

                                currentPage === page

                                    ? 'bg-blue-700 text-white font-semibold'

                                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'

                            }`}

                        >

                            {page}

                        </button>

                    )}

                </React.Fragment>

            ))}



            <button

                onClick={() => onPageChange(currentPage + 1)}

                disabled={currentPage === totalPages}

                className="px-4 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"

            >

                Next

            </button>

        </nav>

    );

};



export default Pagination;



// frontend/src/components/StoryCard.js

import React from 'react';

import { Link } from 'react-router-dom';



/**

 * Reusable component to display a single story card.

 * @param {object} props - Component props.

 * @param {object} props.story - The story object to display.

 */

const StoryCard = ({ story }) => {

    // Fallback image if thumbnail is not available

    const thumbnailUrl = story.thumbnail || `https://placehold.co/400x250/cccccc/333333?text=No+Image`;



    return (

        <div className="bg-white rounded-lg shadow-lg overflow-hidden transform transition-transform duration-300 hover:scale-105 hover:shadow-xl">

            <Link to={`/stories/${story.id}`}>

                <img

                    src={thumbnailUrl}

                    alt={story.title}

                    className="w-full h-48 object-cover object-center"

                    onError={(e) => {

                        e.target.onerror = null; // Prevent infinite loop

                        e.target.src = `https://placehold.co/400x250/cccccc/333333?text=Image+Error`; // Fallback on error

                    }}

                />

            </Link>

            <div className="p-5">

                <h3 className="text-xl font-semibold text-gray-900 mb-2 truncate">

                    <Link to={`/stories/${story.id}`} className="hover:text-blue-600 transition-colors duration-200">

                        {story.title}

                    </Link>

                </h3>

                <p className="text-sm text-gray-600 mb-3">

                    By <span className="font-medium text-blue-500">{story.writer?.name || 'Unknown Writer'}</span>

                </p>

                <p className="text-sm text-gray-700 leading-relaxed line-clamp-3 mb-4">

                    {story.description}

                </p>

                <div className="flex items-center justify-between">

                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">

                        {story.genre?.name || 'Uncategorized'}

                    </span>

                    {story.is_premium && (

                        <span className="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">

                            Premium

                        </span>

                    )}

                    <span className="text-lg font-bold text-gray-900">

                        ${parseFloat(story.price).toFixed(2)}

                    </span>

                </div>

            </div>

        </div>

    );

};



export default StoryCard;



import React from 'react';

import { useState } from 'react';

import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';

import { AuthProvider, useAuth } from './context/AuthContext';



// Layouts

import AppLayout from './layouts/AppLayout';

import AuthLayout from './layouts/AuthLayout';

import UserDashboardLayout from './layouts/UserDashboardLayout';



// Auth Pages

import Login from './pages/auth/Login';

import Register from './pages/auth/Register';

import VerifyEmail from './pages/auth/VerifyEmail';

import ForgotPassword from './pages/auth/ForgotPassword';

import ResetPassword from './pages/auth/ResetPassword';



// Public Pages

import StoryList from './pages/stories/StoryList';

import StoryDetail from './pages/stories/StoryDetail';

import EpisodeDetail from './pages/episodes/EpisodeDetail';

import GenreList from './pages/genres/GenreList';

import GenreDetail from './pages/genres/GenreDetail';

import AboutUs from './pages/AboutUs';

import ContactUs from './pages/ContactUs';

import Pricing from './pages/Pricing';

import Careers from './pages/Careers';

import Blogs from './pages/Blogs';

import PrivacyPolicy from './pages/PrivacyPolicy';

import TermsOfService from './pages/TermsOfService';

import CookiePolicy from './pages/CookiePolicy';



// Error Pages

import NotFound from './pages/NotFound';

 



// Authenticated Pages

import Dashboard from './pages/user/Dashboard'; // This will be rendered inside UserDashboardLayout

import Library from './pages/user/Library';

import Profile from './pages/user/Profile';

import Settings from './pages/user/Settings';

import TransactionList from './pages/transactions/TransactionList';

import TransactionDetail from './pages/transactions/TransactionDetail';



// Writer/Admin Specific Pages

import StoryCreate from './pages/stories/StoryCreate';

import StoryEdit from './pages/stories/StoryEdit';

import EpisodeCreate from './pages/episodes/EpisodeCreate';

import EpisodeEdit from './pages/episodes/EpisodeEdit';



// Loading Component

import LoadingSpinner from './components/LoadingSpinner';

import Alert from './components/Alert'; // Assuming you have an Alert component for displaying messages

import Pagination from './components/Pagination';

import StoryCard from './components/StoryCard';



// Private Route Component to protect routes

const PrivateRoute = ({ children, roles }) => {

    const { isAuthenticated, loading, user } = useAuth();

    const location = window.location.pathname; // Get current path



    if (loading) {

        return <LoadingSpinner fullScreen />;

    }



    if (!isAuthenticated) {

        return <Navigate to="/login" replace />;

    }



    // Allow access to verification routes even if not verified

    const isVerificationRoute = location.includes('/verify-email') || location.includes('/verify-email-prompt');



    // Check if email is verified, redirect if not and it's not a verification route

    if (!user?.is_verified && !isVerificationRoute) {

        return <Navigate to="/verify-email-prompt" replace />;

    }



    // Check if user has the required role(s)

    if (roles && roles.length > 0 && !roles.includes(user?.role)) {

        return <Navigate to="/unauthorized" replace />;

    }



    return children;

};



// Component to prompt email verification

const VerifyEmailPrompt = () => {

    const { user, resendVerificationEmail } = useAuth();

    const [message, setMessage] = useState('');

    const [messageType, setMessageType] = useState('');

    const [resending, setResending] = useState(false);



    const handleResend = async () => {

        setResending(true);

        setMessage('');

        const result = await resendVerificationEmail(user?.email);

        if (result.success) {

            setMessage(result.message);

            setMessageType('success');

        } else {

            setMessage(result.message);

            setMessageType('error');

        }

        setResending(false);

    };



    return (

        <div className="flex flex-col items-center justify-center min-h-screen p-4 bg-gray-50">

            <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                <h2 className="text-2xl font-bold text-center text-gray-800 mb-4">Email Verification Required</h2>

                <p className="text-gray-600 mb-6">

                    Please verify your email address ({user?.email}) to access all features.

                    Check your inbox for the verification email.

                </p>

                {message && <Alert type={messageType} message={message} />}

                <div className="flex flex-col space-y-3">

                    <button

                        onClick={() => window.location.reload()} // Reload to re-check verification status

                        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"

                    >

                        I've Verified My Email (Reload)

                    </button>

                    <button

                        onClick={handleResend}

                        className="w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"

                        disabled={resending}

                    >

                        {resending ? 'Resending...' : 'Resend Verification Email'}

                    </button>

                </div>

            </div>

        </div>

    );

};





function App() {

    return (

        <Router>

            <AuthProvider>

                <Routes>

                    {/* Auth Routes - use AuthLayout for these */}

                    <Route path="/" element={<AuthLayout />}>

                        <Route path="login" element={<Login />} />

                        <Route path="register" element={<Register />} />

                        <Route path="verify-email" element={<VerifyEmail />} />

                        <Route path="forgot-password" element={<ForgotPassword />} />

                        <Route path="reset-password" element={<ResetPassword />} />

                    </Route>



                    {/* Authenticated User Dashboard Layout */}

                    <Route path="/" element={<UserDashboardLayout />}>

                        <Route path="dashboard" element={<PrivateRoute><Dashboard /></PrivateRoute>} />

                        <Route path="profile" element={<PrivateRoute><Profile /></PrivateRoute>} />

                        <Route path="library" element={<PrivateRoute><Library /></PrivateRoute>} />

                        <Route path="settings" element={<PrivateRoute><Settings /></PrivateRoute>} />

                        <Route path="transactions" element={<PrivateRoute><TransactionList /></PrivateRoute>} />

                        <Route path="transactions/:transactionId" element={<PrivateRoute><TransactionDetail /></PrivateRoute>} />



                        {/* Writer/Admin Specific Routes */}

                        <Route path="stories/create" element={<PrivateRoute roles={['writer', 'admin']}><StoryCreate /></PrivateRoute>} />

                        <Route path="stories/:storyId/edit" element={<PrivateRoute roles={['writer', 'admin']}><StoryEdit /></PrivateRoute>} />

                        <Route path="stories/:storyId/episodes/create" element={<PrivateRoute roles={['writer', 'admin']}><EpisodeCreate /></PrivateRoute>} />

                        <Route path="stories/:storyId/episodes/:episodeId/edit" element={<PrivateRoute roles={['writer', 'admin']}><EpisodeEdit /></PrivateRoute>} />

                    </Route>

                    {/* Public and Authenticated Routes - use AppLayout for these */}

                    <Route path="/" element={<AppLayout />}>

                        {/* Public Routes */}

                        <Route index element={<StoryList />} />

                        <Route path="stories" element={<StoryList />} />

                        <Route path="stories/:storyId" element={<StoryDetail />} />

                        <Route path="stories/:storyId/episodes/:episodeId" element={<EpisodeDetail />} />

                        <Route path="genres" element={<GenreList />} />

                        <Route path="genres/:genreSlug" element={<GenreDetail />} />

                        <Route path="about-us" element={<AboutUs />} />

                        <Route path="contact-us" element={<ContactUs />} />

                        <Route path="pricing" element={<Pricing />} />

                        <Route path="careers" element={<Careers />} />

                        <Route path="blogs" element={<Blogs />} />

                        <Route path="privacy-policy" element={<PrivacyPolicy />} />

                        <Route path="terms-of-service" element={<TermsOfService />} />

                        <Route path="cookie-policy" element={<CookiePolicy />} />

                        {/* Verification Prompt (Publicly accessible but triggered by PrivateRoute) */}

                        <Route path="verify-email-prompt" element={<VerifyEmailPrompt />} />

                        {/* Unauthorized Page */}

                        <Route path="unauthorized" element={

                            <div className="flex justify-center items-center h-screen bg-red-100 text-red-800 text-xl font-semibold">

                                You are not authorized to view this page.

                            </div>

                        } />



                        {/* Catch-all for undefined routes */}

                        <Route path="*" element={<Navigate to="/" replace />} />

                    </Route>

                </Routes>

            </AuthProvider>

        </Router>

    );

}



export default App;



import React, { useState } from 'react';

import { Outlet, Link, useLocation } from 'react-router-dom';

import { useAuth } from '../context/AuthContext';

import { FaTwitter, FaInstagram, FaFacebookF, FaYoutube } from 'react-icons/fa';

import { Mail, Send, Twitter, Instagram, Facebook, Youtube, BookOpenText, Users, Compass, Building } from 'lucide-react'; // Using lucide-react for icons





const AppLayout = () => {

    const { user, isAuthenticated, logout } = useAuth();

    const location = useLocation();

    const [mobileNavOpen, setMobileNavOpen] = useState(false);



    const toggleMobileNav = () => {

        setMobileNavOpen(!mobileNavOpen);

    };



    // Check if current route matches

    const isActive = (path) => {

        return location.pathname === path;

    };



    return (

        <div className="min-h-screen flex flex-col bg-gray-100 font-inter">

            {/* Header */}

            <header className="bg-gray-50 sticky top-0 z-50 shadow">

                <div className="container mx-auto flex items-center justify-between relative p-4">

                    {/* Logo */}

                    <div>

                        <Link to="/" className="relative flex items-center">

                            <img

                                src="/assets/img/logo-2.png" // Updated to use the public path

                                alt="The Chapter Hub Logo"

                                className="w-[300px] h-auto"

                            />

                        </Link>

                    </div>



                    {/* Desktop Navigation */}

                    <nav className="hidden lg:block">

                        <ul className="flex space-x-2 text-[16px] font-[400] font-[Roboto Condensed]">

                            <li className={`px-3 py-2 rounded-[6px] ${isActive('/') ? 'bg-[#ff023e] text-white' : 'hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/" className="block">Home</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[6px] ${isActive('/genres') ? 'bg-[#ff023e] text-white' : 'hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/genres" className="block">Genres</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[6px] ${isActive('/about-us') ? 'bg-[#ff023e] text-white' : 'hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/about-us" className="block">About Us</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[6px] ${isActive('/pricing') ? 'bg-[#ff023e] text-white' : 'hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/pricing" className="block">Pricing</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[6px] ${isActive('/contact-us') ? 'bg-[#ff023e] text-white' : 'hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/contact-us" className="block">Contact Us</Link>

                            </li>

                        </ul>

                    </nav>



                    {/* Mobile Navigation Toggle */}

                    <button

                        id="navbar-toggler"

                        className="lg:hidden focus:outline-none"

                        onClick={toggleMobileNav}

                    >

                        <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">

                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16M4 18h16"></path>

                        </svg>

                    </button>



                    {/* Mobile Navigation (Hidden by default) */}

                    {mobileNavOpen && (

                        <ul className="lg:hidden space-y-4 text-[20px] font-[400] font-[Roboto Condensed] absolute bg-gray-50 left-0 w-full px-6 py-4 top-full">

                            <li className={`px-3 py-2 rounded-[8px] ${isActive('/') ? 'bg-[#ff023e] text-white' : 'hover:border-[#ff023e] hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/" className="block" onClick={toggleMobileNav}>Home</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[8px] ${isActive('/genres') ? 'bg-[#ff023e] text-white' : 'hover:border-[#ff023e] hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/genres" className="block" onClick={toggleMobileNav}>Genres</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[8px] ${isActive('/about-us') ? 'bg-[#ff023e] text-white' : 'hover:border-[#ff023e] hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/about-us" className="block" onClick={toggleMobileNav}>About Us</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[8px] ${isActive('/pricing') ? 'bg-[#ff023e] text-white' : 'hover:border-[#ff023e] hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/pricing" className="block" onClick={toggleMobileNav}>Pricing</Link>

                            </li>

                            <li className={`px-3 py-2 rounded-[8px] ${isActive('/contact-us') ? 'bg-[#ff023e] text-white' : 'hover:border-[#ff023e] hover:bg-[#ff023e] hover:text-white'}`}>

                                <Link to="/contact-us" className="block" onClick={toggleMobileNav}>Contact Us</Link>

                            </li>

                        </ul>

                    )}

                </div>



                {/* Auth Links */}

                <div className="absolute top-4 right-8 z-50">

                    {isAuthenticated ? (

                        <div className="flex items-center space-x-2 text-[10px] sm:text-[12px] md:text-[14px] font-[400] font-[Roboto Condensed] ml-auto">

                            <Link

                                to="/profile"

                                className="text-black flex items-center px-3 py-1 rounded-full hover:bg-[#ff023e] hover:text-white transition duration-300"

                            >

                                <i className="bx bx-user text-[18px] mr-1"></i> Profile

                            </Link>

                            <span className="text-black">|</span>

                            <button

                                onClick={logout}

                                className="text-black flex items-center px-3 py-1 rounded-full hover:bg-[#ff023e] hover:text-white transition duration-300"

                            >

                                <i className="bx bx-log-out text-[18px] mr-1"></i> Log Out

                            </button>

                        </div>

                    ) : (

                        <div className="flex items-center space-x-2 text-[10px] sm:text-[12px] md:text-[14px] font-[400] font-[Roboto Condensed] ml-auto">

                            <Link

                                to="/register"

                                className="text-black flex items-center px-3 py-1 rounded-full hover:bg-[#ff023e] hover:text-white transition duration-300"

                            >

                                <i className="bx bx-user-plus text-[18px] mr-1"></i> Sign Up

                            </Link>

                            <span className="text-black">|</span>

                            <Link

                                to="/login"

                                className="text-black flex items-center px-3 py-1 rounded-full hover:bg-[#ff023e] hover:text-white transition duration-300"

                            >

                                <i className="bx bx-log-in text-[18px] mr-1"></i> Log In

                            </Link>

                        </div>

                    )}

                </div>

            </header>



            {/* Main Content */}

            <main className="min-h-screen flex items-center justify-center flex-grow">

                <Outlet />

            </main>



            <footer className="bg-gradient-to-br from-gray-950 to-gray-800 text-gray-300 py-16 px-4 relative overflow-hidden font-inter">

                <div className="absolute inset-0 opacity-10" style={{ background: 'radial-gradient(circle at top right, rgba(255, 2, 62, 0.1) 0%, transparent 50%)' }}></div>



                <div className="max-w-7xl mx-auto z-10 relative">

                    {/* Main Footer Grid */}

                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-12 pb-12 border-b border-gray-700/50">



                        {/* Logo & Description */}

                        <div className="md:col-span-2 lg:col-span-1 flex flex-col items-start lg:pr-8">

                            <Link to="/" className="flex items-center space-x-4 mb-6">

                                {/* Use your actual logo image */}

                                <img

                                    src="/assets/img/logo-2.png" // Updated to use the public path

                                    alt="The Chapter Hub Logo"

                                    className="h-20 w-auto bg-white rounded-full p-2 shadow-xl" // Added bg-white for visibility on dark background

                                />

                                <span className="text-4xl font-extrabold text-white tracking-tight leading-tight">The Chapter<br />Hub</span>

                            </Link>

                            <p className="mt-4 text-base text-gray-400 max-w-md">

                                Unleash your imagination and dive into a world of compelling narratives and diverse voices.

                            </p>

                        </div>



                        {/* Quick Links Section */}

                        <div className="grid grid-cols-1 sm:grid-cols-2 gap-8 lg:col-span-2">

                            <div>

                                <h3 className="text-white font-bold text-xl mb-6 flex items-center gap-2">

                                    <Compass className="text-[#ff023e]" size={20} /> Discover

                                </h3>

                                <ul className="space-y-4 text-base">

                                    <li><Link to="/" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Home</Link></li>

                                    <li><Link to="/stories" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Stories</Link></li>

                                    <li><Link to="/genres" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Genres</Link></li>

                                    <li><Link to="/authors" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Authors</Link></li>

                                </ul>

                            </div>

                            <div>

                                <h3 className="text-white font-bold text-xl mb-6 flex items-center gap-2">

                                    <Building className="text-[#ff023e]" size={20} /> Company

                                </h3>

                                <ul className="space-y-4 text-base">

                                    <li><Link to="/about-us" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> About Us</Link></li>

                                    <li><Link to="/contact-us" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Contact</Link></li>

                                    <li><Link to="/blogs" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Blog</Link></li>

                                    <li><Link to="/careers" className="hover:text-[#ff023e] transition duration-300 transform hover:translate-x-1 flex items-center gap-2"><span className="w-2 h-2 bg-[#ff023e] rounded-full inline-block"></span> Careers</Link></li>

                                </ul>

                            </div>

                        </div>



                        {/* Newsletter & Socials */}

                        <div className="lg:col-span-1 flex flex-col items-center md:items-start text-center md:text-left">

                            <h3 className="text-white font-bold text-xl mb-6 flex items-center gap-2">

                                <Users className="text-[#ff023e]" size={20} /> Join Our Community

                            </h3>

                            <p className="text-sm text-gray-400 mb-4">Subscribe for exclusive content and updates!</p>

                            <form className="flex flex-col gap-4 w-full max-w-sm">

                                <div className="relative">

                                    <Mail className="absolute left-4 top-1/2 -translate-y-1/2 text-gray-500" size={20} />

                                    <input

                                        type="email"

                                        placeholder="Your email address"

                                        className="w-full pl-12 pr-5 py-3 rounded-lg bg-gray-800 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#ff023e] border border-transparent focus:border-[#ff023e] transition duration-300 shadow-inner"

                                    />

                                </div>

                                <button

                                    type="submit"

                                    className="px-6 py-3 bg-[#ff023e] text-white font-bold rounded-lg hover:bg-[#d40033] transition duration-300 ease-in-out shadow-xl transform hover:-translate-y-1 flex items-center justify-center gap-2"

                                >

                                    <Send size={20} /> Sign Up

                                </button>

                            </form>



                            <div className="mt-10 w-full max-w-sm">

                                <h4 className="text-white font-semibold text-lg mb-4">Connect With Us</h4>

                                <div className="flex justify-center md:justify-start space-x-6">

                                    <Link to="#" className="text-gray-400 hover:text-[#ff023e] transition duration-300 transform hover:scale-110" aria-label="Twitter">

                                        <Twitter className="text-3xl" />

                                    </Link>

                                    <Link to="#" className="text-gray-400 hover:text-[#ff023e] transition duration-300 transform hover:scale-110" aria-label="Instagram">

                                        <Instagram className="text-3xl" />

                                    </Link>

                                    <Link to="#" className="text-gray-400 hover:text-[#ff023e] transition duration-300 transform hover:scale-110" aria-label="Facebook">

                                        <Facebook className="text-3xl" />

                                    </Link>

                                    <Link to="#" className="text-[#ff023e] hover:text-white transition duration-300 transform hover:scale-110" aria-label="YouTube">

                                        <Youtube className="text-3xl" />

                                    </Link>

                                </div>

                            </div>

                        </div>

                    </div>



                    {/* Bottom Section */}

                    <div className="flex flex-col md:flex-row justify-between items-center pt-8 text-sm text-gray-400">

                        <p className="mb-4 md:mb-0 text-center md:text-left">© {new Date().getFullYear()} The Chapter Hub. All rights reserved.</p>

                        <div className="flex flex-wrap justify-center md:justify-start space-x-6">

                            <Link to="/privacy-policy" className="hover:text-white transition hover:underline">Privacy Policy</Link>

                            <Link to="/terms-of-service" className="hover:text-white transition hover:underline">Terms of Service</Link>

                            <Link to="/cookie-policy" className="hover:text-white transition hover:underline">Cookies</Link>

                        </div>

                    </div>

                </div>

            </footer>



        </div>

    );

};



export default AppLayout;



import React from 'react';

import { Outlet, Link } from 'react-router-dom';

import { FaTwitter, FaFacebookF, FaInstagram } from 'react-icons/fa'; // Using react-icons for social media

import 'animate.css'; // Ensure animate.css is imported in your main index.js or App.js



/**

 * Layout specifically for authentication pages (Login, Register).

 * Provides a simpler, centered layout with the site's branding and consistent footer.

 */

const AuthLayout = () => {

    const currentYear = new Date().getFullYear();



    return (

        <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-4">

            {/* Main Content Section - acts as the @yield('content') area */}

            <main className="flex items-center justify-center flex-grow w-full max-w-md mx-auto">

                <div className="bg-white rounded-xl shadow-2xl p-8 w-full transform transition-all duration-300 animate__animated animate__fadeIn animate__delay-0.5s">

                    <div className="text-center">

                        <Link to="/">

                            {/* Assuming logo-2.png is in your public/assets/img directory */}

                            <img src="/assets/img/logo-2.png" alt="The Chapter Hub" className="h-24 mx-auto" />

                        </Link>

                    </div>

                    <Outlet /> {/* Renders the child authentication routes (Login or Register) */}

                </div>

            </main>

        </div>

    );

};



export default AuthLayout;



import React, { useState, useEffect } from 'react';

import { Outlet, Link, useLocation } from 'react-router-dom';

import { useAuth } from '../context/AuthContext';

import { FaTwitter, FaInstagram, FaFacebookF, FaYoutube } from 'react-icons/fa';

import { FiChevronLeft, FiChevronRight, FiMenu, FiGrid, FiUser, FiBookOpen, FiBook, FiCreditCard, FiClock, FiBell, FiSettings, FiHelpCircle, FiLogOut } from 'react-icons/fi';



const UserDashboardLayout = () => {

    const { user, logout } = useAuth();

    const location = useLocation();

    const [sidebarOpen, setSidebarOpen] = useState(() => {

        const saved = localStorage.getItem('sidebarOpen');

        return saved === 'true' || window.innerWidth >= 768;

    });

    const [isMobile, setIsMobile] = useState(window.innerWidth < 768);



    useEffect(() => {

        const handleResize = () => {

            setIsMobile(window.innerWidth < 768);

            if (!isMobile) setSidebarOpen(true);

        };



        window.addEventListener('resize', handleResize);

        return () => window.removeEventListener('resize', handleResize);

    }, [isMobile]);



    useEffect(() => {

        localStorage.setItem('sidebarOpen', sidebarOpen);

    }, [sidebarOpen]);



    const toggleSidebar = () => {

        setSidebarOpen(!sidebarOpen);

    };



    const isActive = (path) => {

        return location.pathname === path;

    };



    return (

        <div className="flex h-screen overflow-hidden bg-gray-300">

            {/* Sidebar */}

            <div className={`

                inset-y-0 left-0 z-50 bg-[#ff023e] text-white flex flex-col justify-between transition-all duration-300 ease-in-out

                ${!sidebarOpen && !isMobile ? 'w-20' : 'w-64 lg:w-72 xl:w-80'}

                ${!sidebarOpen && isMobile ? '-translate-x-full' : ''}

                ${isMobile ? 'fixed' : 'relative'}

            `}>

                <div>

                    <div className="flex items-center justify-between p-2 mb-2 relative h-16">

                        {/* Logo */}

                        <div className={`transition-all duration-300 overflow-hidden ${!sidebarOpen && !isMobile ? 'opacity-0 w-0' : 'opacity-100'}`}>

                            <img 

                                src="/assets/img/logo-2.png" 

                                alt="Logo" 

                                className="bg-white h-8 sm:h-10 md:h-16 flex items-center justify-center rounded-lg"

                            />

                        </div>

                        

                        {/* Toggle Button */}

                        <button 

                            onClick={toggleSidebar} 

                            className="absolute right-2 top-1/2 transform -translate-y-1/2 text-white hover:bg-red-600 rounded-full p-1"

                        >

                            {sidebarOpen ? (

                                <FiChevronLeft className="text-2xl" />

                            ) : (

                                <FiChevronRight className="text-2xl" />

                            )}

                        </button>

                    </div>

                    

                    <nav className="overflow-y-auto max-h-[calc(100vh-120px)]">

                        <ul className="space-y-1 sm:space-y-2 px-2">

                            {/* Mobile Profile */}

                            <li className="flex flex-col items-center justify-center py-4 md:hidden">

                                <div className="w-14 h-14 sm:w-16 sm:h-16 rounded-full bg-gray-400 flex items-center justify-center">

                                    <FiUser className="text-3xl sm:text-4xl text-white" />

                                </div>

                                <p className="mt-2 text-sm sm:text-base font-semibold">{user?.name}</p>

                            </li>



                            {/* Menu Items */}

                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/dashboard') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiGrid className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/dashboard" className="nav-text whitespace-nowrap">Dashboard</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/profile') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiUser className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/profile" className="nav-text whitespace-nowrap">My Profile</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/browse-stories') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiBookOpen className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/browse-stories" className="nav-text whitespace-nowrap">Browse Stories</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/my-stories') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiBook className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/my-stories" className="nav-text whitespace-nowrap">My Stories</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/buy-tokens') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiCreditCard className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/buy-tokens" className="nav-text whitespace-nowrap">Buy Tokens</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/payment-methods') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiCreditCard className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/payment-methods" className="nav-text whitespace-nowrap">Payment Methods</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/transactions') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiClock className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/transactions" className="nav-text whitespace-nowrap">Transaction History</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/notifications') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiBell className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/notifications" className="nav-text whitespace-nowrap">Notifications</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/settings') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiSettings className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/settings" className="nav-text whitespace-nowrap">Account Settings</Link>

                            </li>



                            <li className={`nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl ${isActive('/help') ? 'bg-red-700' : 'hover:bg-red-600'}`}>

                                <FiHelpCircle className="text-xl sm:text-2xl md:text-3xl" />

                                <Link to="/help" className="nav-text whitespace-nowrap">Help & Support</Link>

                            </li>

                            

                            {/* Logout Button */}

                            <li 

                                className="nav-item py-2 px-4 rounded-lg flex items-center space-x-2 text-base sm:text-lg md:text-xl lg:text-xl hover:bg-red-600 cursor-pointer" 

                                onClick={logout}

                            >

                                <FiLogOut className="text-xl sm:text-2xl md:text-3xl" />

                                <span className="nav-text whitespace-nowrap">Logout</span>

                            </li>

                        </ul>

                    </nav>

                </div>

                

                {/* Collapsed sidebar indicator */}

                {!sidebarOpen && !isMobile && (

                    <div className="p-2 text-center text-white text-sm">

                        <FiMenu className="text-2xl" />

                    </div>

                )}

            </div>

            

            {/* Main Content Area */}

            <div className="flex-1 flex flex-col overflow-hidden">

                {/* Top Bar */}

                <header className="flex items-center justify-between bg-white shadow p-3">

                    <div className="flex items-center space-x-4">

                        <button 

                            onClick={toggleSidebar} 

                            className="text-gray-700 md:hidden"

                        >

                            <FiMenu className="text-2xl" />

                        </button>

                        <div className="font-bold text-sm sm:text-base md:text-lg">

                            {document.title || 'The Chapter Hub'}

                        </div>

                    </div>

                    <div className="flex items-center space-x-2">

                        <span className="text-sm font-medium">{user?.tokens || 0} Tokens</span>

                        <Link 

                            to="/buy-tokens" 

                            className="bg-[#ff023e] text-white px-2 py-1 rounded text-xs sm:text-sm"

                        >

                            +

                        </Link>

                    </div>

                </header>

                

                {/* Content Area */}

                <main className="flex-1 overflow-y-auto p-3 sm:p-4 md:p-6 text-sm sm:text-base">

                    <Outlet />

                </main>

            </div>



            {/* Footer */}

            <footer className="bg-gray-900 text-gray-300 py-16 px-4 relative overflow-hidden">

                <div className="max-w-7xl mx-auto z-10 relative">

                    {/* Top Section */}

                    <div className="grid grid-cols-1 md:grid-cols-4 lg:grid-cols-5 gap-12 pb-12 border-b border-gray-700">

                        {/* Logo & Description */}

                        <div className="md:col-span-1 lg:col-span-2">

                            <Link to="/" className="flex items-center space-x-4 mb-4">

                                <img

                                    src="/assets/img/logo-2.png"

                                    alt="The Chapter Hub Logo"

                                    className="h-20 bg-white rounded-full p-2 shadow-xl"

                                />

                                <span className="text-3xl font-extrabold text-white tracking-tight">The Chapter Hub</span>

                            </Link>

                            <p className="mt-4 text-base text-gray-400 pr-8">

                                Unleash your imagination and dive into a world of compelling narratives and diverse voices.

                            </p>

                        </div>



                        {/* Quick Links */}

                        <div className="grid grid-cols-2 gap-8 md:col-span-2 lg:col-span-2">

                            <div>

                                <h3 className="text-white font-bold text-xl mb-5">Discover</h3>

                                <ul className="space-y-3 text-base">

                                    <li><Link to="/" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Home</Link></li>

                                    <li><Link to="/stories" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Stories</Link></li>

                                    <li><Link to="/genres" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Genres</Link></li>

                                    <li><Link to="/authors" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Authors</Link></li>

                                </ul>

                            </div>

                            <div>

                                <h3 className="text-white font-bold text-xl mb-5">Company</h3>

                                <ul className="space-y-3 text-base">

                                    <li><Link to="/about-us" className="hover:text-[#ff023e] transition transform hover:translate-x-1">About Us</Link></li>

                                    <li><Link to="/contact-us" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Contact</Link></li>

                                    <li><Link to="/blog" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Blog</Link></li>

                                    <li><Link to="/careers" className="hover:text-[#ff023e] transition transform hover:translate-x-1">Careers</Link></li>

                                </ul>

                            </div>

                        </div>



                        {/* Newsletter & Socials */}

                        <div className="md:col-span-1 lg:col-span-1">

                            <h3 className="text-white font-bold text-xl mb-5">Join Our Community</h3>

                            <p className="text-sm text-gray-400 mb-4">Subscribe for exclusive content and updates!</p>

                            <form className="flex flex-col gap-4">

                                <input

                                    type="email"

                                    placeholder="Your email"

                                    className="px-5 py-3 rounded-lg bg-gray-800 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#ff023e] border border-transparent focus:border-[#ff023e] transition duration-300 shadow-inner"

                                />

                                <button

                                    type="submit"

                                    className="px-6 py-3 bg-[#ff023e] text-white font-bold rounded-lg hover:bg-[#d40033] transition duration-300 ease-in-out shadow-xl transform hover:-translate-y-1"

                                >

                                    Sign Up

                                </button>

                            </form>



                            <div className="mt-8">

                                <h4 className="text-white font-semibold text-lg mb-4">Connect With Us</h4>

                                <div className="flex space-x-6">

                                    <a href="#" className="text-gray-400 hover:text-[#ff023e] transition duration-300 transform hover:scale-110" aria-label="Twitter">

                                        <FaTwitter className="text-3xl" />

                                    </a>

                                    <a href="#" className="text-gray-400 hover:text-[#ff023e] transition duration-300 transform hover:scale-110" aria-label="Instagram">

                                        <FaInstagram className="text-3xl" />

                                    </a>

                                    <a href="#" className="text-gray-400 hover:text-[#ff023e] transition duration-300 transform hover:scale-110" aria-label="Facebook">

                                        <FaFacebookF className="text-3xl" />

                                    </a>

                                    <a href="#" className="text-[#ff023e] hover:text-white transition duration-300 transform hover:scale-110" aria-label="YouTube">

                                        <FaYoutube className="text-3xl" />

                                    </a>

                                </div>

                            </div>

                        </div>

                    </div>



                    {/* Bottom Section */}

                    <div className="flex flex-col md:flex-row justify-between items-center pt-8 text-sm text-gray-400">

                        <p className="mb-4 md:mb-0">&copy; {new Date().getFullYear()} The Chapter Hub. All rights reserved.</p>

                        <div className="flex flex-wrap justify-center md:justify-start space-x-6">

                            <Link to="/privacy-policy" className="hover:text-white transition hover:underline">Privacy Policy</Link>

                            <Link to="/terms-of-service" className="hover:text-white transition hover:underline">Terms of Service</Link>

                            <Link to="/cookies" className="hover:text-white transition hover:underline">Cookies</Link>

                        </div>

                    </div>

                </div>

            </footer>

        </div>

    );

};



export default UserDashboardLayout;



import React from 'react';



const TermsOfService = () => {

    const effectiveDate = new Date().toLocaleDateString('en-US', {

        year: 'numeric',

        month: 'long',

        day: 'numeric'

    });



    return (

        <main className="p-8 bg-gray-100">

            <div className="flex-1 p-8 max-w-4xl mx-auto bg-white shadow-md rounded-lg">

                {/* Terms of Service Header */}

                <div className="mb-8 text-center">

                    <h1 className="text-3xl font-semibold text-[#ff023e]">Terms of Service</h1>

                    <p className="text-gray-600 mt-2">Effective as of {effectiveDate}</p>

                </div>



                {/* Terms of Service Content */}

                <section>

                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">1. Introduction</h2>

                    <p className="text-gray-700 mb-4">

                        These Terms of Service ("Terms") govern your use of The Chapter Hub, a platform for reading and sharing stories.

                        By accessing or using our services, you agree to be bound by these Terms. If you do not agree to these Terms, you may not use the platform.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">2. Use of the Platform</h2>

                    <p className="text-gray-700 mb-4">

                        You agree to use The Chapter Hub only for lawful purposes and in accordance with these Terms. You may not use the platform for any illegal or unauthorized activities, including but not limited to:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li>Posting or sharing unlawful, abusive, or offensive content.</li>

                            <li>Engaging in fraud or deceptive practices.</li>

                            <li>Infringing on the intellectual property rights of others.</li>

                        </ul>

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">3. Account Responsibilities</h2>

                    <p className="text-gray-700 mb-4">

                        You are responsible for maintaining the confidentiality of your account credentials. If you suspect any unauthorized use of your account, you must notify us immediately at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">4. Content Ownership</h2>

                    <p className="text-gray-700 mb-4">

                        All content published on The Chapter Hub, including stories, user contributions, and multimedia, is owned by the respective content creators. By uploading content, you grant The Chapter Hub a non-exclusive, worldwide, royalty-free license to display and distribute your content on the platform.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">5. Payment and Tokens</h2>

                    <p className="text-gray-700 mb-4">

                        The Chapter Hub uses a token-based system. Tokens are required to access premium stories on the platform. Tokens can be purchased via our platform's payment options.

                        Payments for tokens are processed through secure third-party providers, and we do not store sensitive payment information.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">6. Copyright and Intellectual Property</h2>

                    <p className="text-gray-700 mb-4">

                        All content on The Chapter Hub, including text, graphics, logos, and software, is protected by copyright and intellectual property laws. You may not use, reproduce, or distribute any content from the platform without the express permission of the owner.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">7. Limitation of Liability</h2>

                    <p className="text-gray-700 mb-4">

                        The Chapter Hub is not liable for any damages or losses arising from your use of the platform. We make no warranties or representations regarding the availability or accuracy of our services.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">8. Termination</h2>

                    <p className="text-gray-700 mb-4">

                        We reserve the right to suspend or terminate your access to The Chapter Hub at any time, without notice, if we believe you have violated these Terms or engaged in any inappropriate activity.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">9. Contact Us</h2>

                    <p className="text-gray-700 mb-4">

                        If you have any questions or concerns regarding these Terms, please contact us at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>

                </section>

            </div>

        </main>

    );

};



export default TermsOfService;



import React from 'react';



const PrivacyPolicy = () => {

    const effectiveDate = new Date().toLocaleDateString('en-US', {

        year: 'numeric',

        month: 'long',

        day: 'numeric'

    });



    return (

        <main className="p-8 bg-gray-100">

            <div className="flex-1 p-8 max-w-4xl mx-auto bg-white shadow-md rounded-lg">

                {/* Privacy Policy Header */}

                <div className="mb-8 text-center">

                    <h1 className="text-3xl font-semibold text-[#ff023e]">Privacy Policy</h1>

                    <p className="text-gray-600 mt-2">Effective as of {effectiveDate}</p>

                </div>



                {/* Privacy Policy Content */}

                <section>

                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">1. Introduction</h2>

                    <p className="text-gray-700 mb-4">

                        Welcome to The Chapter Hub! We value your privacy and are committed to protecting your personal data.

                        This Privacy Policy explains how we collect, use, and safeguard your information when you use our platform.

                        By using The Chapter Hub, you agree to the practices described in this policy.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">2. Information We Collect</h2>

                    <p className="text-gray-700 mb-4">

                        We collect various types of information in connection with the services we provide, including:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li><strong>Personal Information:</strong> Name, email address, username, and any other information you provide during account creation.</li>

                            <li><strong>Usage Data:</strong> Information about your interactions with the platform, including pages viewed, time spent, and device data.</li>

                            <li><strong>Cookies and Tracking Technologies:</strong> To enhance your experience, we may use cookies to track your usage on the platform.</li>

                            <li><strong>Payment Information:</strong> For users who purchase tokens, we collect payment details (through secure payment processors). We do not store your full payment information.</li>

                        </ul>

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">3. How We Use Your Information</h2>

                    <p className="text-gray-700 mb-4">

                        We use the information we collect to:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li>Provide, maintain, and improve our services.</li>

                            <li>Personalize your experience on the platform.</li>

                            <li>Process payments and transactions for tokens or stories.</li>

                            <li>Respond to customer support requests and feedback.</li>

                            <li>Comply with legal obligations and enforce our terms of service.</li>

                        </ul>

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">4. Data Protection and Security</h2>

                    <p className="text-gray-700 mb-4">

                        We implement reasonable security measures to protect your personal data. However, no method of transmission over the internet is 100% secure, and we cannot guarantee the absolute security of your information.

                        We recommend that you protect your account by using strong passwords and regularly updating them.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">5. Your Rights and Choices</h2>

                    <p className="text-gray-700 mb-4">

                        You have the right to:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li>Access and update your personal information.</li>

                            <li>Request the deletion of your personal information.</li>

                            <li>Opt-out of certain types of communication (e.g., marketing emails).</li>

                        </ul>

                        You can manage your preferences in the account settings or by contacting us directly at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">6. Cookies and Tracking Technologies</h2>

                    <p className="text-gray-700 mb-4">

                        We use cookies to improve your experience on The Chapter Hub. Cookies are small text files stored on your device that help us remember your preferences and provide relevant content. You can control cookies through your browser settings.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">7. Third-Party Links</h2>

                    <p className="text-gray-700 mb-4">

                        Our platform may contain links to third-party websites. We are not responsible for the privacy practices or the content of these third-party sites. We recommend reviewing their privacy policies before engaging with their content.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">8. Changes to This Privacy Policy</h2>

                    <p className="text-gray-700 mb-4">

                        We may update this Privacy Policy from time to time. Any changes will be posted on this page with an updated "Effective Date." We encourage you to review this policy periodically to stay informed about how we protect your information.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">9. Contact Us</h2>

                    <p className="text-gray-700 mb-4">

                        If you have any questions or concerns regarding this Privacy Policy, please contact us at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>

                </section>

            </div>

        </main>

    );

};



export default PrivacyPolicy;



// frontend/src/pages/Pricing.js

import React from 'react';



const Pricing = () => {

    const plans = [

        {

            name: 'Free',

            price: '$0',

            period: 'forever',

            features: [

                'Access to free stories',

                'Basic reading features',

                'Create a reading list',

                'Limited bookmarks',

                'Community access'

            ],

            cta: 'Start Reading',

            popular: false

        },

        {

            name: 'Premium',

            price: '$9.99',

            period: 'per month',

            features: [

                'All free features',

                'Unlimited access to premium stories',

                'Unlimited bookmarks',

                'Early access to new releases',

                'Ad-free reading',

                'Offline reading'

            ],

            cta: 'Get Premium',

            popular: true

        },

        {

            name: 'Writer',

            price: '$19.99',

            period: 'per month',

            features: [

                'All premium features',

                'Publish your own stories',

                'Earn from your writing',

                'Advanced analytics',

                'Writer dashboard',

                'Priority support'

            ],

            cta: 'Become a Writer',

            popular: false

        }

    ];



    return (

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12">

            <header className="text-center mb-12">

                <h1 className="text-5xl font-bold text-[#ff023e] uppercase mb-4 animate__animated animate__fadeIn animate__delay-1s">

                    Pricing Plans

                </h1>

                <p className="text-xl text-gray-700 animate__animated animate__fadeIn animate__delay-1s">

                    Whether you're a reader or a writer, we have a plan that fits your needs.

                </p>

            </header>

            {/* <div className="text-center mb-12">

                <h1 className="text-4xl font-bold text-[#ff023e] mb-4">Choose Your Plan</h1>

                <p className="text-xl text-gray-600 max-w-2xl mx-auto">

                </p>

            </div> */}

            

            <div className="grid md:grid-cols-3 gap-8">

                {plans.map((plan, index) => (

                    <div 

                        key={index} 

                        className={`relative rounded-lg shadow-lg overflow-hidden ${plan.popular ? 'border-2 border-[#ff023e] transform scale-105' : 'border border-gray-200'}`}

                    >

                        {plan.popular && (

                            <div className="absolute top-0 right-0 bg-[#ff023e] text-white px-4 py-1 text-sm font-semibold">

                                Most Popular

                            </div>

                        )}

                        <div className="p-6">

                            <h2 className="text-2xl font-bold mb-2">{plan.name}</h2>

                            <div className="mb-4">

                                <span className="text-4xl font-bold">{plan.price}</span>

                                <span className="text-gray-600">/{plan.period}</span>

                            </div>

                            <ul className="space-y-3 mb-6">

                                {plan.features.map((feature, i) => (

                                    <li key={i} className="flex items-start">

                                        <i className="bx bx-check text-[#ff023e] mr-2 mt-1"></i>

                                        <span>{feature}</span>

                                    </li>

                                ))}

                            </ul>

                            <button 

                                className={`w-full py-3 px-4 rounded-md font-semibold ${plan.popular ? 'bg-[#ff023e] text-white hover:bg-[#d40033]' : 'bg-gray-100 text-[#ff023e] hover:bg-gray-200'} transition duration-300`}

                            >

                                {plan.cta}

                            </button>

                        </div>

                    </div>

                ))}

            </div>

            

            <div className="mt-16 bg-white rounded-lg shadow-lg p-8">

                <h2 className="text-2xl font-bold text-[#ff023e] mb-4">Frequently Asked Questions</h2>

                <div className="space-y-4">

                    {[

                        {

                            question: "Can I switch plans later?",

                            answer: "Yes, you can upgrade or downgrade your plan at any time."

                        },

                        {

                            question: "Is there a free trial for premium plans?",

                            answer: "We offer a 7-day free trial for our Premium plan so you can try before you buy."

                        },

                        {

                            question: "How do payments work?",

                            answer: "Payments are processed monthly through our secure payment system. You can cancel anytime."

                        },

                        {

                            question: "Do you offer refunds?",

                            answer: "We offer refunds within 14 days of purchase if you're not satisfied with our service."

                        }

                    ].map((faq, index) => (

                        <div key={index} className="border-b border-gray-200 pb-4">

                            <h3 className="text-lg font-semibold mb-2">{faq.question}</h3>

                            <p className="text-gray-600">{faq.answer}</p>

                        </div>

                    ))}

                </div>

            </div>

        </div>

    );

};



export default Pricing;



import React from 'react';



const CookiePolicy = () => {

    const effectiveDate = new Date().toLocaleDateString('en-US', {

        year: 'numeric',

        month: 'long',

        day: 'numeric'

    });



    return (

        <main className="p-8 bg-gray-100">

            <div className="flex-1 p-8 max-w-4xl mx-auto bg-white shadow-md rounded-lg">

                {/* Cookie Policy Header */}

                <div className="mb-8 text-center">

                    <h1 className="text-3xl font-semibold text-[#ff023e]">Cookie Policy</h1>

                    <p className="text-gray-600 mt-2">Effective as of {effectiveDate}</p>

                </div>



                {/* Cookie Policy Content */}

                <section>

                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">1. What are Cookies?</h2>

                    <p className="text-gray-700 mb-4">

                        Cookies are small text files that are stored on your computer or mobile device when you visit a website. They are widely used to make websites work or to work more efficiently, as well as to provide information to the owners of the site.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">2. How We Use Cookies</h2>

                    <p className="text-gray-700 mb-4">

                        The Chapter Hub uses cookies for various purposes:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li><strong>Essential Cookies:</strong> These cookies are necessary for the website to function properly. They enable core functionalities like security, network management, and accessibility.</li>

                            <li><strong>Performance and Analytics Cookies:</strong> We use these cookies to collect information about how visitors use our website, such as which pages are visited most often, and if they get error messages from web pages. This helps us improve how the website works.</li>

                            <li><strong>Functionality Cookies:</strong> These cookies allow us to remember choices you make (such as your username, language, or the region you are in) and provide enhanced, more personal features.</li>

                            <li><strong>Advertising/Targeting Cookies:</strong> These cookies are used to deliver advertisements more relevant to you and your interests. They are also used to limit the number of times you see an advertisement and help measure the effectiveness of advertising campaigns.</li>

                        </ul>

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">3. Third-Party Cookies</h2>

                    <p className="text-gray-700 mb-4">

                        In addition to our own cookies, we may also use various third-parties cookies to report usage statistics of the Service, deliver advertisements on and through the Service, and so on.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">4. Your Cookie Choices</h2>

                    <p className="text-gray-700 mb-4">

                        You have the right to decide whether to accept or reject cookies. You can set your browser to refuse all or some browser cookies, or to alert you when cookies are being sent. If you disable or refuse cookies, please note that some parts of this website may then be inaccessible or not function properly.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">5. Changes to This Cookie Policy</h2>

                    <p className="text-gray-700 mb-4">

                        We may update our Cookie Policy from time to time. We will notify you of any changes by posting the new Cookie Policy on this page.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">6. Contact Us</h2>

                    <p className="text-gray-700 mb-4">

                        If you have any questions about this Cookie Policy, please contact us at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>

                </section>

            </div>

        </main>

    );

};



export default CookiePolicy;



import React, { useState } from 'react';

import { FaMapMarkerAlt, FaPhoneAlt, FaEnvelope } from 'react-icons/fa'; // Using react-icons for modern icons

// import { FaTwitter, FaFacebookF, FaInstagram, FaYoutube } from 'react-icons/fa'; // Social media icons

import 'animate.css'; // Ensure animate.css is imported in your main App.js or index.js

import api from '../utils/api'; // Import your axios instance



const ContactUs = () => {

    const [formData, setFormData] = useState({

        name: '',

        email: '',

        phone: '',

        subject: '',

        message: '',

        subscribe: false,

    });



    const [formStatus, setFormStatus] = useState(null);

    const [errors, setErrors] = useState({});



    const handleChange = (e) => {

        const { name, value, type, checked } = e.target;

        setFormData(prev => ({

            ...prev,

            [name]: type === 'checkbox' ? checked : value,

        }));

        if (errors[name]) setErrors(prev => ({ ...prev, [name]: '' }));

    };



    const validateForm = () => {

        const newErrors = {};

        if (!formData.name.trim()) newErrors.name = 'Full Name is required.';

        if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) newErrors.email = 'Enter a valid email address.';

        if (!formData.subject.trim()) newErrors.subject = 'Subject is required.';

        if (!formData.message.trim()) newErrors.message = 'Message is required.';



        setErrors(newErrors);

        return Object.keys(newErrors).length === 0;

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        if (!validateForm()) return;



        setFormStatus('submitting');



        try {

            await api.post('/email/contact', formData);

            setFormStatus('success');

            setFormData({

                name: '',

                email: '',

                phone: '',

                subject: '',

                message: '',

                subscribe: false,

            });

        } catch (error) {

            console.error('Error sending message:', error);

            setFormStatus('error');

            setErrors({

                general: error.response?.data?.message || 'Failed to send message. Please try again.'

            });

        }

    };



    return (

        <main className="container mx-auto my-12 p-8">

            <header className="text-center mb-12">

                <h1 className="text-5xl font-bold text-[#ff023e] uppercase mb-4 animate__animated animate__fadeIn animate__delay-1s">

                    CONTACT US

                </h1>

                <p className="text-xl text-gray-700 animate__animated animate__fadeIn animate__delay-1s">

                    We’d love to hear from you. Reach out to us below.

                </p>

            </header>



            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">

                {/* Contact Info */}

                <div className="shadow-lg bg-white rounded-lg p-8 animate__animated animate__fadeInLeft animate__delay-0.5s">

                    <div className="space-y-6">

                        <h2 className="text-3xl font-semibold text-[#ff023e] text-center">Get in Touch</h2>

                        <p className="text-gray-600 text-center">

                            Have any questions? Fill out the form and we’ll respond in 2-3 business days.

                        </p>

                        <div className="space-y-4">

                            <div className="flex items-center">

                                <FaMapMarkerAlt className="text-2xl text-[#ff023e] mr-2 transition transform duration-300 hover:scale-110" />

                                <a href="https://maps.google.com/maps?q=Castries,%20Saint%20Lucia" target="_blank" rel="noopener noreferrer" className="text-gray-700 transition transform duration-300 hover:scale-110 hover:text-[#ff023e]">

                                    Castries, Saint Lucia

                                </a>

                            </div>

                            <div className="flex items-center">

                                <FaPhoneAlt className="text-2xl text-[#ff023e] mr-2 transition transform duration-300 hover:scale-110" />

                                <a href="tel:+17585551234" className="text-gray-700 transition transform duration-300 hover:scale-110 hover:text-[#ff023e]">

                                    +1 758 555 1234

                                </a>

                            </div>

                            <div className="flex items-center">

                                <FaEnvelope className="text-2xl text-[#ff023e] mr-2 transition transform duration-300 hover:scale-110" />

                                <a href="mailto:info@thechapterhub.com" className="text-blue-600 transition transform duration-300 hover:scale-110 hover:text-[#ff023e]">

                                    info@thechapterhub.com

                                </a>

                            </div>

                        </div>

                        {/* Google Map */}

                        <div className="container mx-auto mb-12">

                             <iframe

                                className="w-full h-64 rounded-lg shadow-lg"

                                src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d15650.627918556722!2d-61.00288865!3d13.99849555!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x8c40751939c339c1%3A0x6b4c102a0f8b1c4b!2sCastries%2C%20St%20Lucia!5e0!3m2!1sen!2sgl!4v1700000000000!5m2!1sen!2sgl" // Example embed URL for Castries

                                allowFullScreen=""

                                loading="lazy"

                                referrerPolicy="no-referrer-when-downgrade"

                                title="Google Map of Castries, Saint Lucia"

                            ></iframe>

                        </div>

                    </div>

                </div>



                {/* Contact Form */}

                <div className="bg-white shadow-lg rounded-lg p-8 animate__animated animate__fadeInRight animate__delay-0.5s">

                    <div>

                        <h2 className="text-3xl font-semibold text-[#ff023e] mb-4 text-center">Send a Message</h2>



                        {/* Alert Messages */}

                        {formStatus === 'success' && (

                            <div id="alert-success" className="bg-green-100 text-green-700 text-center p-4 mb-4 rounded-lg animate__animated animate__fadeIn">

                                <strong>Success!</strong> Your message has been sent.

                            </div>

                        )}

                        {formStatus === 'error' && (

                            <div id="alert-error" className="bg-red-100 text-red-700 text-center p-4 mb-4 rounded-lg animate__animated animate__fadeIn">

                                <strong>Error!</strong> Failed to send message. Please try again.

                            </div>

                        )}

                        {formStatus === 'submitting' && (

                            <div id="alert-info" className="bg-blue-100 text-blue-700 text-center p-4 mb-4 rounded-lg animate__animated animate__fadeIn">

                                Sending your message...

                            </div>

                        )}



                        <form onSubmit={handleSubmit}>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">

                                {/* Name */}

                                <div>

                                    <label htmlFor="name" className="block text-gray-700 mb-1">Full Name</label>

                                    <input

                                        type="text"

                                        name="name"

                                        id="name"

                                        className={`w-full px-4 py-2 border rounded-lg focus:ring-[#ff023e] focus:border-[#ff023e] ${errors.name ? 'border-red-500' : 'border-gray-300'}`}

                                        value={formData.name}

                                        onChange={handleChange}

                                        required

                                    />

                                    {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name}</p>}

                                </div>

                                {/* Email */}

                                <div>

                                    <label htmlFor="email" className="block text-gray-700 mb-1">Email</label>

                                    <input

                                        type="email"

                                        name="email"

                                        id="email"

                                        className={`w-full px-4 py-2 border rounded-lg focus:ring-[#ff023e] focus:border-[#ff023e] ${errors.email ? 'border-red-500' : 'border-gray-300'}`}

                                        value={formData.email}

                                        onChange={handleChange}

                                        required

                                    />

                                    {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email}</p>}

                                </div>

                            </div>



                            {/* Phone */}

                            <div className="mt-4">

                                <label htmlFor="phone" className="block text-gray-700 mb-1">Phone Number (Optional)</label>

                                <input

                                    type="tel"

                                    name="phone"

                                    id="phone"

                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-[#ff023e] focus:border-[#ff023e]"

                                    value={formData.phone}

                                    onChange={handleChange}

                                />

                                {/* No specific phone error handling needed if optional, but you could add regex for format */}

                            </div>



                            {/* Subject */}

                            <div className="mt-4">

                                <label htmlFor="subject" className="block text-gray-700 mb-1">Subject</label>

                                <input

                                    type="text"

                                    name="subject"

                                    id="subject"

                                    className={`w-full px-4 py-2 border rounded-lg focus:ring-[#ff023e] focus:border-[#ff023e] ${errors.subject ? 'border-red-500' : 'border-gray-300'}`}

                                    value={formData.subject}

                                    onChange={handleChange}

                                    required

                                />

                                {errors.subject && <p className="text-red-500 text-sm mt-1">{errors.subject}</p>}

                            </div>



                            {/* Message */}

                            <div className="mt-4">

                                <label htmlFor="message" className="block text-gray-700 mb-1">Message</label>

                                <textarea

                                    name="message"

                                    id="message"

                                    className={`w-full px-4 py-2 border rounded-lg focus:ring-[#ff023e] focus:border-[#ff023e] ${errors.message ? 'border-red-500' : 'border-gray-300'}`}

                                    rows="4"

                                    value={formData.message}

                                    onChange={handleChange}

                                    required

                                ></textarea>

                                {errors.message && <p className="text-red-500 text-sm mt-1">{errors.message}</p>}

                            </div>



                            {/* Checkbox */}

                            <div className="mt-4">

                                <label className="flex items-center text-gray-700 cursor-pointer">

                                    <input

                                        type="checkbox"

                                        name="subscribe"

                                        id="subscribe"

                                        className="mr-2 h-4 w-4 text-[#ff023e] rounded focus:ring-[#ff023e] focus:ring-offset-0 border-gray-300"

                                        checked={formData.subscribe}

                                        onChange={handleChange}

                                    />

                                    <span>I’d like to receive updates and promotions.</span>

                                </label>

                            </div>



                            {/* Submit Button */}

                            <button

                                type="submit"

                                className="bg-[#ff023e] text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 w-full mt-6 transition duration-300 ease-in-out transform hover:scale-105"

                                disabled={formStatus === 'submitting'} // Disable button when submitting

                            >

                                {formStatus === 'submitting' ? 'Sending...' : 'Send Message'}

                            </button>

                        </form>

                    </div>

                </div>

            </div>

        </main>

    );

};



export default ContactUs;



import React from 'react';



const Careers = () => {

    const effectiveDate = new Date().toLocaleDateString('en-US', {

        year: 'numeric',

        month: 'long',

        day: 'numeric'

    });

    

    return (

        <main className="p-8 bg-gray-100">

            <div className="flex-1 p-8 max-w-4xl mx-auto bg-white shadow-md rounded-lg">

                {/* Cookie Policy Header */}

                <div className="mb-8 text-center">

                    <h1 className="text-3xl font-semibold text-[#ff023e]">Cookie Policy</h1>

                    <p className="text-gray-600 mt-2">Effective as of {effectiveDate}</p>

                </div>



                {/* Cookie Policy Content */}

                <section>

                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">1. What are Cookies?</h2>

                    <p className="text-gray-700 mb-4">

                        Cookies are small text files that are stored on your computer or mobile device when you visit a website. They are widely used to make websites work or to work more efficiently, as well as to provide information to the owners of the site.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">2. How We Use Cookies</h2>

                    <p className="text-gray-700 mb-4">

                        The Chapter Hub uses cookies for various purposes:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li><strong>Essential Cookies:</strong> These cookies are necessary for the website to function properly. They enable core functionalities like security, network management, and accessibility.</li>

                            <li><strong>Performance and Analytics Cookies:</strong> We use these cookies to collect information about how visitors use our website, such as which pages are visited most often, and if they get error messages from web pages. This helps us improve how the website works.</li>

                            <li><strong>Functionality Cookies:</strong> These cookies allow us to remember choices you make (such as your username, language, or the region you are in) and provide enhanced, more personal features.</li>

                            <li><strong>Advertising/Targeting Cookies:</strong> These cookies are used to deliver advertisements more relevant to you and your interests. They are also used to limit the number of times you see an advertisement and help measure the effectiveness of advertising campaigns.</li>

                        </ul>

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">3. Third-Party Cookies</h2>

                    <p className="text-gray-700 mb-4">

                        In addition to our own cookies, we may also use various third-parties cookies to report usage statistics of the Service, deliver advertisements on and through the Service, and so on.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">4. Your Cookie Choices</h2>

                    <p className="text-gray-700 mb-4">

                        You have the right to decide whether to accept or reject cookies. You can set your browser to refuse all or some browser cookies, or to alert you when cookies are being sent. If you disable or refuse cookies, please note that some parts of this website may then be inaccessible or not function properly.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">5. Changes to This Cookie Policy</h2>

                    <p className="text-gray-700 mb-4">

                        We may update our Cookie Policy from time to time. We will notify you of any changes by posting the new Cookie Policy on this page.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">6. Contact Us</h2>

                    <p className="text-gray-700 mb-4">

                        If you have any questions about this Cookie Policy, please contact us at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>

                </section>

            </div>

        </main>

    );

};



export default Careers;



import React from 'react';



const Blogs = () => {

    const effectiveDate = new Date().toLocaleDateString('en-US', {

        year: 'numeric',

        month: 'long',

        day: 'numeric'

    });



    return (

        <main className="p-8 bg-gray-100">

            <div className="flex-1 p-8 max-w-4xl mx-auto bg-white shadow-md rounded-lg">

                {/* Cookie Policy Header */}

                <div className="mb-8 text-center">

                    <h1 className="text-3xl font-semibold text-[#ff023e]">Cookie Policy</h1>

                    <p className="text-gray-600 mt-2">Effective as of {effectiveDate}</p>

                </div>



                {/* Cookie Policy Content */}

                <section>

                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">1. What are Cookies?</h2>

                    <p className="text-gray-700 mb-4">

                        Cookies are small text files that are stored on your computer or mobile device when you visit a website. They are widely used to make websites work or to work more efficiently, as well as to provide information to the owners of the site.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">2. How We Use Cookies</h2>

                    <p className="text-gray-700 mb-4">

                        The Chapter Hub uses cookies for various purposes:

                        <ul className="list-disc ml-6 text-gray-700">

                            <li><strong>Essential Cookies:</strong> These cookies are necessary for the website to function properly. They enable core functionalities like security, network management, and accessibility.</li>

                            <li><strong>Performance and Analytics Cookies:</strong> We use these cookies to collect information about how visitors use our website, such as which pages are visited most often, and if they get error messages from web pages. This helps us improve how the website works.</li>

                            <li><strong>Functionality Cookies:</strong> These cookies allow us to remember choices you make (such as your username, language, or the region you are in) and provide enhanced, more personal features.</li>

                            <li><strong>Advertising/Targeting Cookies:</strong> These cookies are used to deliver advertisements more relevant to you and your interests. They are also used to limit the number of times you see an advertisement and help measure the effectiveness of advertising campaigns.</li>

                        </ul>

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">3. Third-Party Cookies</h2>

                    <p className="text-gray-700 mb-4">

                        In addition to our own cookies, we may also use various third-parties cookies to report usage statistics of the Service, deliver advertisements on and through the Service, and so on.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">4. Your Cookie Choices</h2>

                    <p className="text-gray-700 mb-4">

                        You have the right to decide whether to accept or reject cookies. You can set your browser to refuse all or some browser cookies, or to alert you when cookies are being sent. If you disable or refuse cookies, please note that some parts of this website may then be inaccessible or not function properly.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">5. Changes to This Cookie Policy</h2>

                    <p className="text-gray-700 mb-4">

                        We may update our Cookie Policy from time to time. We will notify you of any changes by posting the new Cookie Policy on this page.

                    </p>



                    <h2 className="text-xl font-semibold text-[#ff023e] mb-4">6. Contact Us</h2>

                    <p className="text-gray-700 mb-4">

                        If you have any questions about this Cookie Policy, please contact us at <a href="mailto:info@thechapterhub.com" className="text-blue-600">info@thechapterhub.com</a>.

                    </p>

                </section>

            </div>

        </main>

    );

};



export default Blogs;



import React, { useEffect } from 'react';

import { FaHeart, FaRocket, FaGift, FaUsers } from 'react-icons/fa'; // Using react-icons for modern icons

import 'animate.css'; // Make sure you have animate.css installed and imported globally or in your main CSS file.



const AboutUs = () => {

    // You might want to use a library like 'react-intersection-observer' for more controlled animations

    // based on scroll position, but for a direct replication of animate.css delays,

    // we'll rely on the classes being present.



    return (

        <main className="container mx-auto my-12 px-4">

            {/* Header Section */}

            <header className="text-center mb-12">

                <h1 className="text-5xl font-bold text-[#ff023e] uppercase mb-4 animate__animated animate__fadeIn animate__delay-1s">About Us</h1>

                <p className="text-xl text-gray-700 animate__animated animate__fadeIn animate__delay-1s">

                    Learn more about who we are, what we do, and the incredible team behind it all.

                </p>

            </header>



            {/* Our Mission */}

            <section className="grid grid-cols-1 md:grid-cols-2 gap-12 mb-16">

                <div className="flex flex-col items-center justify-center text-center">

                    <h2 className="text-2xl font-semibold text-[#ff023e] mb-4 animate__animated animate__fadeIn animate__delay-0.5s">

                        Our Mission

                    </h2>

                    <p className="text-lg text-gray-600 animate__animated animate__fadeIn animate__delay-1s">

                        We aim to provide a platform where readers and writers can connect, share stories, and grow together.

                    </p>

                </div>

                <div className="relative">

                    <img src="/assets/img/mission.jpg" alt="Our Mission Image" className="rounded-lg shadow-lg w-full h-full object-cover animate__animated animate__fadeIn animate__delay-1s" />

                </div>

            </section>



            {/* Our Core Values */}

            <section className="text-center mb-16">

                <h2 className="text-3xl font-semibold text-[#ff023e] mb-6 animate__animated animate__fadeIn animate__delay-0.5s">

                    Our Core Values

                </h2>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-12">

                    <div className="flex flex-col items-center text-center animate__animated animate__fadeIn animate__delay-0.5s">

                        <FaHeart className="text-4xl text-[#ff023e] mb-4" />

                        <h3 className="text-xl font-semibold text-gray-800">Passion</h3>

                        <p className="text-gray-600">We are passionate about storytelling and fostering a creative community.</p>

                    </div>

                    <div className="flex flex-col items-center text-center animate__animated animate__fadeIn animate__delay-1s">

                        <FaRocket className="text-4xl text-[#ff023e] mb-4" />

                        <h3 className="text-xl font-semibold text-gray-800">Innovation</h3>

                        <p className="text-gray-600">We continuously innovate to bring the best features to our users.</p>

                    </div>

                    <div className="flex flex-col items-center text-center animate__animated animate__fadeIn animate__delay-1.5s">

                        <FaGift className="text-4xl text-[#ff023e] mb-4" />

                        <h3 className="text-xl font-semibold text-gray-800">Generosity</h3>

                        <p className="text-gray-600">We value sharing knowledge and giving back to the community.</p>

                    </div>

                    <div className="flex flex-col items-center text-center animate__animated animate__fadeIn animate__delay-2s">

                        <FaUsers className="text-4xl text-[#ff023e] mb-4" />

                        <h3 className="text-xl font-semibold text-gray-800">Collaboration</h3>

                        <p className="text-gray-600">We believe in teamwork and collaborating with others to create amazing experiences.</p>

                    </div>

                </div>

            </section>



            {/* Meet Our Team */}

            <section className="mb-16">

                <h2 className="text-3xl font-semibold text-[#ff023e] text-center mb-6 animate__animated animate__fadeIn animate__delay-0.5s">

                    Meet Our Team

                </h2>

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-12">

                    {/* Team Member 1 */}

                    <div className="text-center animate__animated animate__fadeIn animate__delay-1s">

                        <img src="/assets/img/team/team-member-1.jpg" alt="Team Member 1" className="rounded-full w-40 h-40 mx-auto mb-4 shadow-lg" />

                        <h3 className="text-xl font-semibold text-gray-800">Errol Marquis</h3>

                        <p className="text-gray-600">CEO & Founder</p>

                        <p className="text-gray-500">Errol is passionate about storytelling and building communities through innovative tech.</p>

                    </div>

                    {/* Team Member 2 */}

                    <div className="text-center animate__animated animate__fadeIn animate__delay-1.5s">

                        <img src="/assets/img/team/team-member-2.jpg" alt="Team Member 2" className="rounded-full w-40 h-40 mx-auto mb-4 shadow-lg" />

                        <h3 className="text-xl font-semibold text-gray-800">Jane Smith</h3>

                        <p className="text-gray-600">Marketing Director</p>

                        <p className="text-gray-500">Jane helps us spread our mission to a wider audience through creative marketing strategies.</p>

                    </div>

                    {/* Team Member 3 */}

                    <div className="text-center animate__animated animate__fadeIn animate__delay-2s">

                        <img src="/assets/img/team/team-member-3.jpg" alt="Team Member 3" className="rounded-full w-40 h-40 mx-auto mb-4 shadow-lg" />

                        <h3 className="text-xl font-semibold text-gray-800">Jad Isidore</h3>

                        <p className="text-gray-600">Lead Developer</p>

                        <p className="text-gray-500">Jad leads the development team and ensures our platform runs smoothly with cutting-edge technology.</p>

                    </div>

                </div>

            </section>



            {/* Call to Action Section */}

            <section className="text-center py-12 bg-gray-100 rounded-lg shadow-md">

                <p className="text-lg text-gray-600 animate__animated animate__fadeIn animate__delay-0.5s">

                    Ready to join us? <a href="/register" className="text-[#ff023e] font-semibold hover:underline">Register today!</a>

                </p>

            </section>

        </main>

    );

};



export default AboutUs;



users



// frontend/src/pages/user/Settings.js

import React, { useState } from 'react';

import Alert from '../../components/Alert';

// In a real app, you'd have services for updating settings like password, notifications etc.



const Settings = () => {

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [loading, setLoading] = useState(false);



    // Placeholder for password change

    const [passwordData, setPasswordData] = useState({

        current_password: '',

        new_password: '',

        confirm_new_password: '',

    });



    const handlePasswordChange = (e) => {

        const { name, value } = e.target;

        setPasswordData({ ...passwordData, [name]: value });

    };



    const handleSubmitPasswordChange = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        if (passwordData.new_password !== passwordData.confirm_new_password) {

            setMessageType('error');

            setMessage('New passwords do not match.');

            setLoading(false);

            return;

        }



        // Simulate API call

        try {

            // In a real app: await api.put('/user/change-password', passwordData);

            await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate network request

            setMessageType('success');

            setMessage('Password changed successfully!');

            setPasswordData({ current_password: '', new_password: '', confirm_new_password: '' }); // Clear form

        } catch (err) {

            setMessageType('error');

            setMessage('Failed to change password. Please check your current password.');

            console.error('Password change error:', err);

        } finally {

            setLoading(false);

        }

    };



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Account Settings</h1>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <div className="bg-white rounded-lg shadow-xl p-8 max-w-3xl mx-auto space-y-10">

                {/* Change Password Section */}

                <div>

                    <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-3">Change Password</h2>

                    <form onSubmit={handleSubmitPasswordChange} className="space-y-5">

                        <div>

                            <label htmlFor="current_password" className="block text-gray-700 text-sm font-medium mb-2">

                                Current Password

                            </label>

                            <input

                                type="password"

                                id="current_password"

                                name="current_password"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={passwordData.current_password}

                                onChange={handlePasswordChange}

                                required

                            />

                        </div>

                        <div>

                            <label htmlFor="new_password" className="block text-gray-700 text-sm font-medium mb-2">

                                New Password

                            </label>

                            <input

                                type="password"

                                id="new_password"

                                name="new_password"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={passwordData.new_password}

                                onChange={handlePasswordChange}

                                required

                            />

                        </div>

                        <div>

                            <label htmlFor="confirm_new_password" className="block text-gray-700 text-sm font-medium mb-2">

                                Confirm New Password

                            </label>

                            <input

                                type="password"

                                id="confirm_new_password"

                                name="confirm_new_password"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={passwordData.confirm_new_password}

                                onChange={handlePasswordChange}

                                required

                            />

                        </div>

                        <button

                            type="submit"

                            className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"

                            disabled={loading}

                        >

                            {loading ? 'Changing...' : 'Change Password'}

                        </button>

                    </form>

                </div>



                {/* Notification Settings (Placeholder) */}

                <div>

                    <h2 className="text-2xl font-bold text-gray-800 mb-4 border-b pb-3">Notification Settings</h2>

                    <div className="space-y-4">

                        <label className="flex items-center cursor-pointer">

                            <input type="checkbox" className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500" defaultChecked />

                            <span className="ml-2 text-gray-700">Email notifications for new comments</span>

                        </label>

                        <label className="flex items-center cursor-pointer">

                            <input type="checkbox" className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500" />

                            <span className="ml-2 text-gray-700">Receive promotional emails</span>

                        </label>

                        {/* More notification options */}

                    </div>

                    <button

                        className="mt-6 px-5 py-2 bg-gray-200 text-gray-800 rounded-lg font-semibold hover:bg-gray-300 transition-colors duration-200"

                        disabled

                    >

                        Save Notification Settings (Coming Soon)

                    </button>

                </div>



                {/* Delete Account (Placeholder) */}

                <div>

                    <h2 className="text-2xl font-bold text-red-800 mb-4 border-b pb-3">Danger Zone</h2>

                    <p className="text-gray-700 mb-4">

                        Permanently delete your account and all associated data. This action cannot be undone.

                    </p>

                    <button

                        className="px-5 py-2 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition-colors duration-200"

                        onClick={() => alert('Account deletion functionality not yet implemented.')}

                    >

                        Delete My Account

                    </button>

                </div>

            </div>

        </div>

    );

};



export default Settings;



// frontend/src/pages/user/Profile.js

import React, { useEffect, useState } from 'react';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';

import api from '../../utils/api'; // Direct API call for user-specific data



const Profile = () => {

    const { user, isAuthenticated, loading: authLoading } = useAuth();

    const [profileData, setProfileData] = useState({

        name: '',

        email: '',

        dob: '',

        contact_number: '',

        address: '',

        profile_picture: '',

        language: '',

        timezone: '',

    });

    const [loading, setLoading] = useState(true);

    const [isEditing, setIsEditing] = useState(false);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');



    useEffect(() => {

        const fetchProfile = async () => {

            if (!isAuthenticated || authLoading) return;



            setLoading(true);

            try {

                const response = await api.get('/profile'); // This route should return the full user object

                const userProfile = response.data.user;

                setProfileData({

                    name: userProfile.name || '',

                    email: userProfile.email || '',

                    dob: userProfile.dob ? new Date(userProfile.dob).toISOString().split('T')[0] : '', // Format for input type="date"

                    contact_number: userProfile.contact_number || '',

                    address: userProfile.address || '',

                    profile_picture: userProfile.profile_picture || '',

                    language: userProfile.language || 'en',

                    timezone: userProfile.timezone || 'UTC',

                });

            } catch (err) {

                console.error('Error fetching profile:', err);

                setMessage('Failed to load profile data.');

                setMessageType('error');

            } finally {

                setLoading(false);

            }

        };



        fetchProfile();

    }, [isAuthenticated, authLoading]);



    const handleChange = (e) => {

        const { name, value } = e.target;

        setProfileData({ ...profileData, [name]: value });

    };



    const handleSave = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);

        try {

            // Assuming you'll add a backend endpoint like /api/profile

            // This endpoint should handle updating user data

            const response = await api.put('/profile', profileData); // You need to implement this backend route

            setMessage('Profile updated successfully!');

            setMessageType('success');

            setIsEditing(false); // Exit edit mode

            // Optionally, update the user context if necessary

            // user.updateProfile(response.data.user); // If you have such a method in AuthContext

        } catch (err) {

            console.error('Error saving profile:', err);

            setMessage(err.response?.data?.message || 'Failed to update profile.');

            setMessageType('error');

        } finally {

            setLoading(false);

        }

    };



    if (authLoading || loading) return <Alert type="info" message="Loading profile..." />;

    if (!profileData.email) return <Alert type="error" message="Profile not found." />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">My Profile</h1>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <div className="bg-white rounded-lg shadow-xl p-8 max-w-3xl mx-auto">

                <div className="flex justify-end mb-4">

                    {!isEditing ? (

                        <button

                            onClick={() => setIsEditing(true)}

                            className="px-5 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-colors duration-200"

                        >

                            Edit Profile

                        </button>

                    ) : (

                        <button

                            onClick={handleSave}

                            className="px-5 py-2 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition-colors duration-200 disabled:opacity-50"

                            disabled={loading}

                        >

                            {loading ? 'Saving...' : 'Save Changes'}

                        </button>

                    )}

                </div>



                <form onSubmit={handleSave} className="space-y-6">

                    <div className="flex flex-col items-center mb-6">

                        <img

                            src={profileData.profile_picture || `https://placehold.co/150x150/cccccc/333333?text=${profileData.name.charAt(0)}`}

                            alt="Profile"

                            className="w-32 h-32 rounded-full object-cover border-4 border-blue-300 shadow-md"

                        />

                        {isEditing && (

                            <div className="mt-4 w-full">

                                <label htmlFor="profile_picture" className="block text-gray-700 text-sm font-medium mb-2">

                                    Profile Picture URL

                                </label>

                                <input

                                    type="url"

                                    id="profile_picture"

                                    name="profile_picture"

                                    className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                    value={profileData.profile_picture}

                                    onChange={handleChange}

                                />

                            </div>

                        )}

                    </div>



                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

                        <div>

                            <label htmlFor="name" className="block text-gray-700 text-sm font-medium mb-2">Name</label>

                            <input

                                type="text"

                                id="name"

                                name="name"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={profileData.name}

                                onChange={handleChange}

                                disabled={!isEditing}

                                required

                            />

                        </div>

                        <div>

                            <label htmlFor="email" className="block text-gray-700 text-sm font-medium mb-2">Email</label>

                            <input

                                type="email"

                                id="email"

                                name="email"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={profileData.email}

                                onChange={handleChange}

                                disabled={true} // Email usually not editable

                            />

                        </div>

                        <div>

                            <label htmlFor="dob" className="block text-gray-700 text-sm font-medium mb-2">Date of Birth</label>

                            <input

                                type="date"

                                id="dob"

                                name="dob"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={profileData.dob}

                                onChange={handleChange}

                                disabled={!isEditing}

                            />

                        </div>

                        <div>

                            <label htmlFor="contact_number" className="block text-gray-700 text-sm font-medium mb-2">Contact Number</label>

                            <input

                                type="text"

                                id="contact_number"

                                name="contact_number"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={profileData.contact_number}

                                onChange={handleChange}

                                disabled={!isEditing}

                            />

                        </div>

                    </div>



                    <div>

                        <label htmlFor="address" className="block text-gray-700 text-sm font-medium mb-2">Address</label>

                        <textarea

                            id="address"

                            name="address"

                            className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 resize-y min-h-[80px]"

                            value={profileData.address}

                            onChange={handleChange}

                            disabled={!isEditing}

                        ></textarea>

                    </div>



                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">

                        <div>

                            <label htmlFor="language" className="block text-gray-700 text-sm font-medium mb-2">Language</label>

                            <select

                                id="language"

                                name="language"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={profileData.language}

                                onChange={handleChange}

                                disabled={!isEditing}

                            >

                                <option value="en">English</option>

                                {/* Add more languages as needed */}

                            </select>

                        </div>

                        <div>

                            <label htmlFor="timezone" className="block text-gray-700 text-sm font-medium mb-2">Timezone</label>

                            <input

                                type="text"

                                id="timezone"

                                name="timezone"

                                className="w-full px-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                                value={profileData.timezone}

                                onChange={handleChange}

                                disabled={!isEditing}

                                placeholder="e.g., UTC, America/New_York"

                            />

                        </div>

                    </div>

                </form>

            </div>

        </div>

    );

};



export default Profile;



// frontend/src/pages/user/Library.js

import React, { useEffect, useState } from 'react';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';

import StoryCard from '../../components/StoryCard'; // Reusing StoryCard

import api from '../../utils/api'; // Direct API call for user-specific data



const Library = () => {

    const { user, isAuthenticated, loading: authLoading } = useAuth();

    const [purchasedStories, setPurchasedStories] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);



    useEffect(() => {

        const fetchPurchasedStories = async () => {

            if (!isAuthenticated || authLoading) return;



            setLoading(true);

            setError(null);

            try {

                // Assuming you'll add a backend endpoint like /api/user/library

                // This endpoint should fetch StoryPurchase records for the user

                // and eager load the associated Story data.

                const response = await api.get('/user/library'); // You need to implement this backend route

                setPurchasedStories(response.data.purchasedStories);

            } catch (err) {

                console.error('Error fetching purchased stories:', err);

                setError('Failed to load your library. Please try again.');

            } finally {

                setLoading(false);

            }

        };



        fetchPurchasedStories();

    }, [isAuthenticated, authLoading]);



    if (authLoading || loading) return <Alert type="info" message="Loading your library..." />;

    if (error) return <Alert type="error" message={error} />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">My Library</h1>



            {purchasedStories.length > 0 ? (

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">

                    {purchasedStories.map(purchase => (

                        // Assuming purchase.Story contains the full story object

                        <StoryCard key={purchase.story_id} story={purchase.Story} />

                    ))}

                </div>

            ) : (

                <div className="bg-white rounded-lg shadow-md p-8 text-center">

                    <p className="text-gray-600 text-lg mb-4">You haven't purchased any stories yet.</p>

                    <p className="text-gray-600 mb-6">Explore our collection and find your next favorite read!</p>

                    <a href="/stories" className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200">

                        Browse Stories

                    </a>

                </div>

            )}

        </div>

    );

};



export default Library;



// frontend/src/pages/user/Dashboard.js

import React, { useEffect, useState } from 'react';

import { useAuth } from '../../context/AuthContext';

import authService from '../../services/authService'; // Assuming you'll add a getProfile method

import storyService from '../../services/storyService'; // To fetch writer's stories

import Alert from '../../components/Alert';

import { Link } from 'react-router-dom';

import StoryCard from '../../components/StoryCard'; // Reusing StoryCard



const Dashboard = () => {

    const { user, isAuthenticated, loading: authLoading } = useAuth();

    const [profile, setProfile] = useState(null);

    const [writerStories, setWriterStories] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);



    useEffect(() => {

        const fetchDashboardData = async () => {

            if (!isAuthenticated || authLoading) return; // Wait for auth to be ready



            setLoading(true);

            setError(null);

            try {

                // Fetch full user profile (if needed, AuthContext might already have enough)

                const userProfile = await authService.getProfile();

                setProfile(userProfile.user);



                // If user is a writer, fetch their stories

                if (userProfile.user.role === 'writer') {

                    // Assuming storyService.getStories can filter by writer_id

                    // You might need to add a new backend route for this or modify existing one.

                    // For now, let's mock or assume a filterable endpoint exists.

                    // If not, you'd fetch all stories and filter in frontend, which is less efficient.

                    const writerStoriesRes = await storyService.getStories({ writer_id: userProfile.user.id });

                    setWriterStories(writerStoriesRes.stories);

                }

            } catch (err) {

                console.error('Error fetching dashboard data:', err);

                setError('Failed to load dashboard data. Please try again.');

            } finally {

                setLoading(false);

            }

        };



        fetchDashboardData();

    }, [isAuthenticated, authLoading, user]); // Depend on isAuthenticated and authLoading



    if (authLoading || loading) return <Alert type="info" message="Loading dashboard..." />;

    if (error) return <Alert type="error" message={error} />;

    if (!profile) return <Alert type="info" message="User profile not found." />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Welcome, {profile.name}!</h1>



            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">

                {/* User Info Card */}

                <div className="bg-white rounded-lg shadow-xl p-6 text-center">

                    <img

                        src={profile.profile_picture || `https://placehold.co/100x100/cccccc/333333?text=${profile.name.charAt(0)}`}

                        alt={profile.name}

                        className="w-24 h-24 rounded-full mx-auto mb-4 object-cover border-4 border-blue-200"

                    />

                    <h2 className="text-2xl font-semibold text-gray-800">{profile.name}</h2>

                    <p className="text-gray-600">{profile.email}</p>

                    <p className="text-gray-600 capitalize">Role: <span className="font-medium text-blue-700">{profile.role}</span></p>

                    <Link to="/profile" className="mt-4 inline-block px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200">

                        View/Edit Profile

                    </Link>

                </div>



                {/* Quick Links / Actions */}

                <div className="bg-white rounded-lg shadow-xl p-6">

                    <h3 className="text-2xl font-bold text-gray-800 mb-4">Quick Actions</h3>

                    <ul className="space-y-3">

                        <li>

                            <Link to="/library" className="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">

                                <span className="mr-2 text-xl">📚</span> My Library

                            </Link>

                        </li>

                        <li>

                            <Link to="/transactions" className="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">

                                <span className="mr-2 text-xl">💸</span> Token Transactions

                            </Link>

                        </li>

                        <li>

                            <Link to="/settings" className="flex items-center text-blue-600 hover:text-blue-800 transition-colors duration-200">

                                <span className="mr-2 text-xl">⚙️</span> Account Settings

                            </Link>

                        </li>

                        {profile.role === 'writer' || profile.role === 'admin' ? (

                            <li>

                                <Link to="/stories/create" className="flex items-center text-green-600 hover:text-green-800 transition-colors duration-200">

                                    <span className="mr-2 text-xl">✍️</span> Create New Story

                                </Link>

                            </li>

                        ) : null}

                    </ul>

                </div>



                {/* Token Balance Card */}

                <div className="bg-white rounded-lg shadow-xl p-6 text-center flex flex-col justify-center items-center">

                    <h3 className="text-2xl font-bold text-gray-800 mb-4">Your Tokens</h3>

                    <div className="text-5xl font-extrabold text-yellow-500 mb-4">

                        {profile.UserToken?.balance ? parseFloat(profile.UserToken.balance).toFixed(2) : 'N/A'}

                    </div>

                    <p className="text-gray-600 mb-4">Current Token Balance</p>

                    <Link to="/tokens/purchase-info" className="px-6 py-3 bg-yellow-500 text-white rounded-lg font-semibold hover:bg-yellow-600 transition-colors duration-200">

                        Buy More Tokens

                    </Link>

                </div>

            </div>



            {/* Writer's Stories Section */}

            {profile.role === 'writer' && writerStories.length > 0 && (

                <div className="mb-12">

                    <h3 className="text-3xl font-bold text-gray-900 mb-6 border-b pb-4">Your Published Stories</h3>

                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">

                        {writerStories.map(story => (

                            <StoryCard key={story.id} story={story} />

                        ))}

                    </div>

                    {writerStories.length === 0 && (

                        <p className="text-gray-600 text-center">You haven't published any stories yet.</p>

                    )}

                </div>

            )}



            {/* Recently Read Stories (Placeholder) */}

            <div className="mb-12">

                <h3 className="text-3xl font-bold text-gray-900 mb-6 border-b pb-4">Recently Read Episodes</h3>

                <p className="text-gray-600">

                    (This section would display recently read episodes. Requires fetching `ReadingProgress` and associated `Episode` and `Story` data.)

                    You can implement this by fetching recent `ReadingProgress` entries for the user and then joining with `Episode` and `Story` models.

                </p>

                {/* Example:

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">

                    {recentEpisodes.map(episode => (

                        <div key={episode.id} className="bg-white rounded-lg shadow-md p-4">

                            <Link to={`/stories/${episode.Story.id}/episodes/${episode.id}`} className="text-blue-600 font-semibold hover:underline">

                                {episode.title}

                            </Link>

                            <p className="text-sm text-gray-600">from {episode.Story.title}</p>

                            <p className="text-xs text-gray-500">Last read: {new Date(episode.ReadingProgress.last_read_at).toLocaleString()}</p>

                        </div>

                    ))}

                </div>

                */}

            </div>

        </div>

    );

};



export default Dashboard;



transactions



// frontend/src/pages/transactions/TransactionList.js

import React, { useEffect, useState } from 'react';

import tokenTransactionService from '../../services/tokenTransactionService';

import Alert from '../../components/Alert';

import Pagination from '../../components/Pagination';

import { Link } from 'react-router-dom';



const TransactionList = () => {

    const [transactions, setTransactions] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);

    const [currentPage, setCurrentPage] = useState(1);

    const [totalPages, setTotalPages] = useState(1);



    useEffect(() => {

        const fetchTransactions = async () => {

            setLoading(true);

            setError(null);

            try {

                const params = { page: currentPage, limit: 10 }; // Matches backend pagination limit

                const data = await tokenTransactionService.getTokenTransactions(params);

                setTransactions(data.transactions);

                setCurrentPage(data.currentPage);

                setTotalPages(data.totalPages);

            } catch (err) {

                console.error('Error fetching transactions:', err);

                setError('Failed to load transactions. Please try again later.');

            } finally {

                setLoading(false);

            }

        };

        fetchTransactions();

    }, [currentPage]);



    if (loading) return <Alert type="info" message="Loading transactions..." />;

    if (error) return <Alert type="error" message={error} />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">My Token Transactions</h1>



            <div className="bg-white rounded-lg shadow-xl p-8">

                {transactions.length > 0 ? (

                    <div className="overflow-x-auto">

                        <table className="min-w-full divide-y divide-gray-200">

                            <thead className="bg-gray-50">

                                <tr>

                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">

                                        Date

                                    </th>

                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">

                                        Type

                                    </th>

                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">

                                        Description

                                    </th>

                                    <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">

                                        Amount (Tokens)

                                    </th>

                                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">

                                        Status

                                    </th>

                                    <th scope="col" className="relative px-6 py-3">

                                        <span className="sr-only">Details</span>

                                    </th>

                                </tr>

                            </thead>

                            <tbody className="bg-white divide-y divide-gray-200">

                                {transactions.map((transaction) => (

                                    <tr key={transaction.id}>

                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">

                                            {new Date(transaction.createdAt).toLocaleString()}

                                        </td>

                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 capitalize">

                                            {transaction.type.replace('_', ' ')}

                                        </td>

                                        <td className="px-6 py-4 text-sm text-gray-900">

                                            {transaction.description}

                                        </td>

                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">

                                            <span className={`font-semibold ${transaction.type === 'purchase' || transaction.type === 'bonus' ? 'text-green-600' : 'text-red-600'}`}>

                                                {transaction.type === 'purchase' || transaction.type === 'bonus' ? '+' : '-'}

                                                {parseFloat(transaction.amount).toFixed(2)}

                                            </span>

                                        </td>

                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 capitalize">

                                            <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${

                                                transaction.status === 'completed' ? 'bg-green-100 text-green-800' :

                                                transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :

                                                'bg-red-100 text-red-800'

                                            }`}>

                                                {transaction.status}

                                            </span>

                                        </td>

                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">

                                            <Link to={`/transactions/${transaction.id}`} className="text-blue-600 hover:text-blue-900">

                                                Details

                                            </Link>

                                        </td>

                                    </tr>

                                ))}

                            </tbody>

                        </table>

                    </div>

                ) : (

                    <div className="text-center p-6 text-gray-600">

                        <p className="text-lg mb-4">No token transactions found.</p>

                        <p>

                            <Link to="/tokens/purchase-info" className="text-blue-600 hover:underline font-medium">

                                Purchase tokens

                            </Link> to get started!

                        </p>

                    </div>

                )}



                <Pagination

                    currentPage={currentPage}

                    totalPages={totalPages}

                    onPageChange={setCurrentPage}

                />

            </div>

        </div>

    );

};



export default TransactionList;



// frontend/src/pages/transactions/TransactionDetail.js

import React, { useEffect, useState } from 'react';

import { useParams, Link } from 'react-router-dom';

import Alert from '../../components/Alert';

import api from '../../utils/api'; // Direct API call for specific transaction



const TransactionDetail = () => {

    const { transactionId } = useParams();

    const [transaction, setTransaction] = useState(null);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);



    useEffect(() => {

        const fetchTransaction = async () => {

            setLoading(true);

            setError(null);

            try {

                // You'll need to implement a backend route for fetching a single transaction by ID

                // For example: /api/tokens/transactions/:id

                const response = await api.get(`/tokens/transactions/${transactionId}`); // Implement this backend route

                setTransaction(response.data.transaction);

            } catch (err) {

                console.error('Error fetching transaction details:', err);

                setError('Failed to load transaction details. Please try again.');

            } finally {

                setLoading(false);

            }

        };

        fetchTransaction();

    }, [transactionId]);



    if (loading) return <Alert type="info" message="Loading transaction details..." />;

    if (error) return <Alert type="error" message={error} />;

    if (!transaction) return <Alert type="info" message="Transaction not found." />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Transaction Details</h1>



            <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl mx-auto">

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-lg">

                    <div className="font-semibold text-gray-700">Transaction ID:</div>

                    <div className="text-gray-900 break-words">{transaction.id}</div>



                    <div className="font-semibold text-gray-700">Date:</div>

                    <div className="text-gray-900">{new Date(transaction.createdAt).toLocaleString()}</div>



                    <div className="font-semibold text-gray-700">Type:</div>

                    <div className="text-gray-900 capitalize">{transaction.type.replace('_', ' ')}</div>



                    <div className="font-semibold text-gray-700">Amount:</div>

                    <div className={`font-bold ${transaction.type === 'purchase' || transaction.type === 'bonus' ? 'text-green-600' : 'text-red-600'}`}>

                        {transaction.type === 'purchase' || transaction.type === 'bonus' ? '+' : '-'}

                        {parseFloat(transaction.amount).toFixed(2)} Tokens

                    </div>



                    <div className="font-semibold text-gray-700">Status:</div>

                    <div className="text-gray-900 capitalize">

                        <span className={`px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${

                            transaction.status === 'completed' ? 'bg-green-100 text-green-800' :

                            transaction.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :

                            'bg-red-100 text-red-800'

                        }`}>

                            {transaction.status}

                        </span>

                    </div>



                    <div className="font-semibold text-gray-700">Description:</div>

                    <div className="text-gray-900">{transaction.description}</div>



                    {transaction.transactionable_type && (

                        <>

                            <div className="font-semibold text-gray-700">Related To:</div>

                            <div className="text-gray-900">

                                {transaction.transactionable_type} (ID: {transaction.transactionable_id})

                                {/* You can add a link here if the transactionable is a story or episode */}

                                {transaction.transactionable_type === 'Story' && (

                                    <Link to={`/stories/${transaction.transactionable_id}`} className="ml-2 text-blue-600 hover:underline">

                                        View Story

                                    </Link>

                                )}

                            </div>

                        </>

                    )}

                </div>



                <div className="mt-8 text-center">

                    <Link to="/transactions" className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200">

                        Back to All Transactions

                    </Link>

                </div>

            </div>

        </div>

    );

};



export default TransactionDetail;



stories



// frontend/src/pages/stories/StoryList.js

import React, { useEffect, useState } from 'react';

import storyService from '../../services/storyService';

import Alert from '../../components/Alert';

import Pagination from '../../components/Pagination';

import StoryCard from '../../components/StoryCard'; // Import StoryCard

import { useSearchParams } from 'react-router-dom'; // For filtering/pagination params



const StoryList = () => {

    const [stories, setStories] = useState([]);

    const [genres, setGenres] = useState([]);

    const [warnings, setWarnings] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);

    const [currentPage, setCurrentPage] = useState(1);

    const [totalPages, setTotalPages] = useState(1);

    const [searchParams, setSearchParams] = useSearchParams();

    const [filters, setFilters] = useState({

        search: searchParams.get('search') || '',

        genre: searchParams.get('genre') || '',

        warning: searchParams.get('warning') || '',

    });



    useEffect(() => {

        const fetchStories = async () => {

            setLoading(true);

            setError(null);

            try {

                const params = {

                    page: currentPage,

                    limit: 12, // Matches backend pagination limit

                    ...filters

                };

                const res = await storyService.getStories(params); // Use the service

                setStories(res.stories);

                setGenres(res.genres);

                setWarnings(res.warnings);

                setCurrentPage(res.currentPage);

                setTotalPages(res.totalPages);

                setLoading(false);

            } catch (err) {

                console.error('Error fetching stories:', err);

                setError('Failed to load stories. Please try again later.');

                setLoading(false);

            }

        };

        fetchStories();



        // Update URL search params

        const newSearchParams = new URLSearchParams();

        for (const key in filters) {

            if (filters[key]) {

                newSearchParams.set(key, filters[key]);

            }

        }

        newSearchParams.set('page', currentPage);

        setSearchParams(newSearchParams);



    }, [currentPage, filters, setSearchParams]);



    const handleFilterChange = (e) => {

        setFilters({ ...filters, [e.target.name]: e.target.value });

        setCurrentPage(1); // Reset to first page on filter change

    };



    if (loading) return <Alert type="info" message="Loading stories..." />;

    if (error) return <Alert type="error" message={error} />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Explore Stories</h1>



            <div className="flex flex-wrap items-center justify-center gap-4 mb-8 p-4 bg-white rounded-lg shadow-md">

                <input

                    type="text"

                    name="search"

                    placeholder="Search stories by title or description..."

                    className="p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 w-full md:w-auto flex-grow"

                    value={filters.search}

                    onChange={handleFilterChange}

                />

                <select

                    name="genre"

                    className="p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 w-full md:w-auto"

                    value={filters.genre}

                    onChange={handleFilterChange}

                >

                    <option value="">All Genres</option>

                    {genres.map(genre => (

                        <option key={genre.id} value={genre.name}>{genre.name}</option>

                    ))}

                </select>

                <select

                    name="warning"

                    className="p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 w-full md:w-auto"

                    value={filters.warning}

                    onChange={handleFilterChange}

                >

                    <option value="">All Warnings</option>

                    {warnings.map(warning => (

                        <option key={warning.id} value={warning.name}>{warning.name}</option>

                    ))}

                </select>

            </div>



            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">

                {stories.length > 0 ? (

                    stories.map(story => (

                        <StoryCard key={story.id} story={story} />

                    ))

                ) : (

                    <p className="col-span-full text-center text-gray-600 text-lg">No stories found matching your criteria.</p>

                )}

            </div>



            <Pagination

                currentPage={currentPage}

                totalPages={totalPages}

                onPageChange={setCurrentPage}

            />

        </div>

    );

};



export default StoryList;



// frontend/src/pages/stories/StoryEdit.js

import React, { useState, useEffect } from 'react';

import { useParams, useNavigate } from 'react-router-dom';

import storyService from '../../services/storyService';

import Alert from '../../components/Alert';

import { useAuth } from '../../context/AuthContext';



const StoryEdit = () => {

    const { storyId } = useParams();

    const navigate = useNavigate();

    const { user } = useAuth(); // To check if the current user is the writer or admin



    const [formData, setFormData] = useState({

        title: '',

        genre_id: '',

        description: '',

        thumbnail: '',

        price: 0.00,

        content_file: '',

        is_featured: false,

        is_premium: false,

        age_restriction: null,

        warnings: [],

    });

    const [genres, setGenres] = useState([]);

    const [contentWarnings, setContentWarnings] = useState([]);

    const [loading, setLoading] = useState(true);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');



    useEffect(() => {

        const fetchStoryData = async () => {

            try {

                const data = await storyService.getStoryEditData(storyId);

                // Basic authorization check on frontend (backend also enforces)

                if (user && data.story.writer_id !== user.id && user.role !== 'admin') {

                    navigate('/unauthorized'); // Redirect if not authorized

                    return;

                }



                setFormData({

                    title: data.story.title,

                    genre_id: data.story.genre_id,

                    description: data.story.description,

                    thumbnail: data.story.thumbnail || '',

                    price: parseFloat(data.story.price),

                    content_file: data.story.content_file || '',

                    is_featured: data.story.is_featured,

                    is_premium: data.story.is_premium,

                    age_restriction: data.story.age_restriction || '',

                    warnings: data.selectedWarnings || [],

                });

                setGenres(data.genres);

                setContentWarnings(data.warnings);

                setLoading(false);

            } catch (err) {

                console.error('Error fetching story data for edit:', err);

                setMessage(err.response?.data?.message || 'Failed to load story for editing.');

                setMessageType('error');

                setLoading(false);

            }

        };

        fetchStoryData();

    }, [storyId, navigate, user]);



    const handleChange = (e) => {

        const { name, value, type, checked } = e.target;

        setFormData({

            ...formData,

            [name]: type === 'checkbox' ? checked : value,

        });

    };



    const handleWarningChange = (e) => {

        const { value, checked } = e.target;

        setFormData(prev => ({

            ...prev,

            warnings: checked

                ? [...prev.warnings, parseInt(value)]

                : prev.warnings.filter(warningId => warningId !== parseInt(value)),

        }));

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        try {

            const res = await storyService.updateStory(storyId, formData);

            setMessageType('success');

            setMessage(res.message);

            navigate(`/stories/${storyId}`); // Redirect to the updated story's detail page

        } catch (err) {

            console.error('Error updating story:', err);

            setMessageType('error');

            setMessage(err.response?.data?.message || 'Failed to update story.');

        } finally {

            setLoading(false);

        }

    };



    if (loading) return <Alert type="info" message="Loading story for editing..." />;

    if (!formData.title && !loading) return <Alert type="error" message="Story not found or you are not authorized to edit it." />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Edit Story: {formData.title}</h1>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-xl p-8 space-y-6 max-w-3xl mx-auto">

                <div>

                    <label htmlFor="title" className="block text-gray-700 text-sm font-medium mb-2">

                        Title <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="text"

                        id="title"

                        name="title"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.title}

                        onChange={handleChange}

                        required

                    />

                </div>



                <div>

                    <label htmlFor="genre_id" className="block text-gray-700 text-sm font-medium mb-2">

                        Genre <span className="text-red-500">*</span>

                    </label>

                    <select

                        id="genre_id"

                        name="genre_id"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.genre_id}

                        onChange={handleChange}

                        required

                    >

                        <option value="">Select a Genre</option>

                        {genres.map(genre => (

                            <option key={genre.id} value={genre.id}>{genre.name}</option>

                        ))}

                    </select>

                </div>



                <div>

                    <label htmlFor="description" className="block text-gray-700 text-sm font-medium mb-2">

                        Description <span className="text-red-500">*</span>

                    </label>

                    <textarea

                        id="description"

                        name="description"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 resize-y min-h-[150px]"

                        value={formData.description}

                        onChange={handleChange}

                        required

                    ></textarea>

                </div>



                <div>

                    <label htmlFor="thumbnail" className="block text-gray-700 text-sm font-medium mb-2">

                        Thumbnail URL

                    </label>

                    <input

                        type="url"

                        id="thumbnail"

                        name="thumbnail"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="https://example.com/image.jpg"

                        value={formData.thumbnail}

                        onChange={handleChange}

                    />

                </div>



                <div>

                    <label htmlFor="content_file" className="block text-gray-700 text-sm font-medium mb-2">

                        Content File URL (Optional, if entire story is a single file)

                    </label>

                    <input

                        type="url"

                        id="content_file"

                        name="content_file"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="https://example.com/story.pdf"

                        value={formData.content_file}

                        onChange={handleChange}

                    />

                </div>



                <div>

                    <label htmlFor="price" className="block text-gray-700 text-sm font-medium mb-2">

                        Price (Tokens) <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="number"

                        id="price"

                        name="price"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.price}

                        onChange={handleChange}

                        min="0"

                        step="0.01"

                        required

                    />

                </div>



                <div className="flex items-center space-x-4">

                    <label htmlFor="is_featured" className="flex items-center cursor-pointer">

                        <input

                            type="checkbox"

                            id="is_featured"

                            name="is_featured"

                            className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500"

                            checked={formData.is_featured}

                            onChange={handleChange}

                        />

                        <span className="ml-2 text-gray-700 text-sm">Featured Story</span>

                    </label>

                    <label htmlFor="is_premium" className="flex items-center cursor-pointer">

                        <input

                            type="checkbox"

                            id="is_premium"

                            name="is_premium"

                            className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500"

                            checked={formData.is_premium}

                            onChange={handleChange}

                        />

                        <span className="ml-2 text-gray-700 text-sm">Premium Content</span>

                    </label>

                </div>



                <div>

                    <label htmlFor="age_restriction" className="block text-gray-700 text-sm font-medium mb-2">

                        Age Restriction (Optional)

                    </label>

                    <input

                        type="number"

                        id="age_restriction"

                        name="age_restriction"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.age_restriction || ''}

                        onChange={handleChange}

                        min="0"

                    />

                </div>



                <div>

                    <label className="block text-gray-700 text-sm font-medium mb-2">

                        Content Warnings

                    </label>

                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">

                        {contentWarnings.map(warning => (

                            <label key={warning.id} className="flex items-center cursor-pointer bg-gray-50 p-3 rounded-lg shadow-sm hover:bg-gray-100 transition-colors duration-200">

                                <input

                                    type="checkbox"

                                    name="warnings"

                                    value={warning.id}

                                    checked={formData.warnings.includes(warning.id)}

                                    onChange={handleWarningChange}

                                    className="form-checkbox h-5 w-5 text-red-600 rounded focus:ring-red-500"

                                />

                                <span className="ml-2 text-gray-700 text-sm font-medium">{warning.name}</span>

                            </label>

                        ))}

                    </div>

                </div>



                <button

                    type="submit"

                    className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"

                    disabled={loading}

                >

                    {loading ? 'Updating...' : 'Update Story'}

                </button>

            </form>

        </div>

    );

};



export default StoryEdit;



// frontend/src/pages/stories/StoryDetail.js

import React, { useEffect, useState } from 'react';

import { useParams, Link } from 'react-router-dom';

import storyService from '../../services/storyService';

import likeService from '../../services/likeService';

import bookmarkService from '../../services/bookmarkService';

import shareService from '../../services/shareService';

import storyPurchaseService from '../../services/storyPurchaseService';

import commentService from '../../services/commentService';

import Alert from '../../components/Alert';

import { useAuth } from '../../context/AuthContext';



const StoryDetail = () => {

    const { storyId } = useParams();

    const { user, isAuthenticated } = useAuth();

    const [story, setStory] = useState(null);

    const [isLiked, setIsLiked] = useState(false);

    const [bookmarked, setBookmarked] = useState(false);

    const [likesCount, setLikesCount] = useState(0);

    const [readingProgress, setReadingProgress] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [commentText, setCommentText] = useState('');

    const [replyToCommentId, setReplyToCommentId] = useState(null);

    const [requiresPurchase, setRequiresPurchase] = useState(false);



    useEffect(() => {

        const fetchStory = async () => {

            setLoading(true);

            setError(null);

            setMessage(null);

            try {

                const data = await storyService.getStoryById(storyId);

                setStory(data.story);

                setIsLiked(data.isLiked);

                setBookmarked(data.bookmarked);

                setLikesCount(data.story.likes ? data.story.likes.length : 0); // Assuming likes are eager loaded

                setReadingProgress(data.readingProgress);

                setRequiresPurchase(data.requiresPurchase || false); // Check if backend indicated purchase is needed

            } catch (err) {

                console.error('Error fetching story:', err);

                if (err.response && err.response.status === 403 && err.response.data?.requiresPurchase) {

                    setRequiresPurchase(true);

                    setStory(err.response.data.story); // Still get basic story data for purchase page

                } else {

                    setError('Failed to load story. Please try again later.');

                }

            } finally {

                setLoading(false);

            }

        };

        fetchStory();

    }, [storyId, user]); // Re-fetch if storyId or user changes



    const handleLikeToggle = async () => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to like stories.');

            return;

        }

        try {

            const res = await likeService.toggleLike(storyId);

            setIsLiked(res.liked);

            setLikesCount(res.count);

            setMessageType('success');

            setMessage(res.liked ? 'Story liked!' : 'Story unliked!');

        } catch (err) {

            console.error('Error toggling like:', err);

            setMessageType('error');

            setMessage('Failed to toggle like.');

        }

    };



    const handleBookmarkToggle = async () => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to bookmark stories.');

            return;

        }

        try {

            const res = await bookmarkService.toggleBookmark(storyId);

            setBookmarked(res.bookmarked);

            setMessageType('success');

            setMessage(res.bookmarked ? 'Story bookmarked!' : 'Story unbookmarked!');

        } catch (err) {

            console.error('Error toggling bookmark:', err);

            setMessageType('error');

            setMessage('Failed to toggle bookmark.');

        }

    };



    const handleShare = async (platform) => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to share stories.');

            return;

        }

        try {

            const res = await shareService.shareStory(storyId, platform);

            window.open(res.shareUrl, '_blank'); // Open share URL in new tab

            setMessageType('success');

            setMessage(`Story shared on ${platform}!`);

        } catch (err) {

            console.error('Error sharing story:', err);

            setMessageType('error');

            setMessage('Failed to share story.');

        }

    };



    const handlePurchaseStory = async () => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to purchase stories.');

            return;

        }

        setLoading(true);

        try {

            const res = await storyPurchaseService.purchaseStory(storyId);

            if (res.success) {

                setMessageType('success');

                setMessage(res.message);

                setRequiresPurchase(false); // Story is now purchased

                // Re-fetch story to get full content and updated status

                const data = await storyService.getStoryById(storyId);

                setStory(data.story);

                setIsLiked(data.isLiked);

                setBookmarked(data.bookmarked);

                setLikesCount(data.story.likes ? data.story.likes.length : 0);

                setReadingProgress(data.readingProgress);

            } else {

                setMessageType('error');

                setMessage(res.message);

            }

        } catch (err) {

            console.error('Error purchasing story:', err);

            setMessageType('error');

            setMessage('Failed to purchase story. Please try again.');

        } finally {

            setLoading(false);

        }

    };



    const handleAddComment = async (e) => {

        e.preventDefault();

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to add comments.');

            return;

        }

        if (!commentText.trim()) {

            setMessageType('error');

            setMessage('Comment cannot be empty.');

            return;

        }

        try {

            await commentService.addComment(storyId, commentText, replyToCommentId);

            setCommentText('');

            setReplyToCommentId(null);

            setMessageType('success');

            setMessage('Comment added successfully!');

            // Re-fetch story to update comments

            const data = await storyService.getStoryById(storyId);

            setStory(data.story);

        } catch (err) {

            console.error('Error adding comment:', err);

            setMessageType('error');

            setMessage('Failed to add comment.');

        }

    };



    const handleDeleteComment = async (commentId) => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to delete comments.');

            return;

        }

        if (!window.confirm('Are you sure you want to delete this comment?')) {

            return;

        }

        try {

            await commentService.deleteComment(commentId);

            setMessageType('success');

            setMessage('Comment deleted successfully!');

            // Re-fetch story to update comments

            const data = await storyService.getStoryById(storyId);

            setStory(data.story);

        } catch (err) {

            console.error('Error deleting comment:', err);

            setMessageType('error');

            setMessage(err.response?.data?.message || 'Failed to delete comment.');

        }

    };



    const getEpisodeProgress = (episodeId) => {

        return readingProgress.find(p => p.episode_id === episodeId);

    };



    if (loading) return <Alert type="info" message="Loading story details..." />;

    if (error) return <Alert type="error" message={error} />;

    if (!story) return <Alert type="info" message="Story not found." />;



    if (requiresPurchase) {

        return (

            <div className="container mx-auto p-4 flex flex-col items-center justify-center min-h-[60vh]">

                <div className="bg-white rounded-lg shadow-xl p-8 max-w-2xl text-center">

                    <h2 className="text-3xl font-bold text-red-600 mb-4">Premium Story</h2>

                    <p className="text-gray-700 text-lg mb-6">

                        This story is premium content. To unlock all episodes and enjoy the full experience, please purchase it for <span className="font-bold text-blue-600">${parseFloat(story.price).toFixed(2)}</span> tokens.

                    </p>

                    <h3 className="text-2xl font-semibold text-gray-800 mb-2">{story.title}</h3>

                    <p className="text-gray-600 mb-4 line-clamp-4">{story.description}</p>

                    {isAuthenticated ? (

                        <button

                            onClick={handlePurchaseStory}

                            className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50"

                            disabled={loading}

                        >

                            {loading ? 'Processing...' : `Purchase for $${parseFloat(story.price).toFixed(2)} Tokens`}

                        </button>

                    ) : (

                        <p className="text-blue-600 text-lg font-medium">

                            <Link to="/login" className="hover:underline">Log in</Link> to purchase this story.

                        </p>

                    )}

                </div>

            </div>

        );

    }



    return (

        <div className="container mx-auto p-4">

            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <div className="bg-white rounded-lg shadow-xl p-8 mb-8">

                <div className="flex flex-col md:flex-row gap-8">

                    <div className="md:w-1/3 flex-shrink-0">

                        <img

                            src={story.thumbnail || `https://placehold.co/400x600/cccccc/333333?text=No+Image`}

                            alt={story.title}

                            className="w-full h-auto rounded-lg shadow-md object-cover"

                            onError={(e) => { e.target.onerror = null; e.target.src = `https://placehold.co/400x600/cccccc/333333?text=Image+Error`; }}

                        />

                    </div>

                    <div className="md:w-2/3">

                        <h1 className="text-4xl font-extrabold text-gray-900 mb-3">{story.title}</h1>

                        <p className="text-lg text-gray-600 mb-4">

                            By <span className="font-semibold text-blue-600">{story.writer?.name || 'Unknown Writer'}</span>

                        </p>

                        <div className="flex flex-wrap gap-2 mb-4">

                            <span className="px-3 py-1 rounded-full text-sm font-medium bg-purple-100 text-purple-800">

                                {story.genre?.name || 'Uncategorized'}

                            </span>

                            {story.warnings && story.warnings.map(warning => (

                                <span key={warning.id} className="px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">

                                    {warning.name}

                                </span>

                            ))}

                            {story.is_premium && (

                                <span className="px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">

                                    Premium

                                </span>

                            )}

                            {story.age_restriction && (

                                <span className="px-3 py-1 rounded-full text-sm font-medium bg-gray-200 text-gray-700">

                                    Age {story.age_restriction}+

                                </span>

                            )}

                        </div>

                        <p className="text-gray-700 leading-relaxed mb-6">{story.description}</p>



                        <div className="flex items-center space-x-4 mb-6">

                            <button

                                onClick={handleLikeToggle}

                                className={`flex items-center px-4 py-2 rounded-lg transition-colors duration-200 ${

                                    isLiked ? 'bg-red-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'

                                }`}

                            >

                                <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">

                                    <path fillRule="evenodd" d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z" clipRule="evenodd"></path>

                                </svg>

                                {likesCount} Likes

                            </button>

                            <button

                                onClick={handleBookmarkToggle}

                                className={`flex items-center px-4 py-2 rounded-lg transition-colors duration-200 ${

                                    bookmarked ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'

                                }`}

                            >

                                <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">

                                    <path d="M5 4a2 2 0 012-2h6a2 2 0 012 2v14l-5-2.5L5 18V4z"></path>

                                </svg>

                                {bookmarked ? 'Bookmarked' : 'Bookmark'}

                            </button>

                            <div className="relative group">

                                <button className="flex items-center px-4 py-2 rounded-lg bg-green-500 text-white hover:bg-green-600 transition-colors duration-200">

                                    <svg className="w-5 h-5 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">

                                        <path d="M15 8a3 3 0 10-2.977-2.977l-1.287 1.287A3 3 0 009 9.121v5.757a3 3 0 002.977 2.977l1.287-1.287A3 3 0 0015 11zM12 7a1 1 0 11-2 0 1 1 0 012 0zm-2 4a1 1 0 11-2 0 1 1 0 012 0z"></path>

                                    </svg>

                                    Share

                                </button>

                                <div className="absolute left-0 mt-2 w-36 bg-white rounded-md shadow-lg py-1 z-10 opacity-0 group-hover:opacity-100 group-hover:visible transition-all duration-200 invisible">

                                    <button onClick={() => handleShare('twitter')} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Twitter</button>

                                    <button onClick={() => handleShare('facebook')} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Facebook</button>

                                </div>

                            </div>

                        </div>



                        {/* Writer Actions */}

                        {isAuthenticated && (user?.id === story.writer_id || user?.role === 'admin') && (

                            <div className="mt-6 pt-4 border-t border-gray-200 flex flex-wrap gap-3">

                                <Link

                                    to={`/stories/${story.id}/edit`}

                                    className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors duration-200"

                                >

                                    Edit Story

                                </Link>

                                <Link

                                    to={`/stories/${story.id}/episodes/create`}

                                    className="px-4 py-2 bg-indigo-500 text-white rounded-lg hover:bg-indigo-600 transition-colors duration-200"

                                >

                                    Add Episode

                                </Link>

                                <button

                                    onClick={async () => {

                                        if (window.confirm('Are you sure you want to delete this story? This action cannot be undone.')) {

                                            try {

                                                await storyService.deleteStory(story.id);

                                                setMessageType('success');

                                                setMessage('Story deleted successfully!');

                                                // Redirect to stories list after deletion

                                                // navigate('/stories'); // You'd typically redirect here

                                            } catch (err) {

                                                console.error('Error deleting story:', err);

                                                setMessageType('error');

                                                setMessage('Failed to delete story.');

                                            }

                                        }

                                    }}

                                    className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-200"

                                >

                                    Delete Story

                                </button>

                            </div>

                        )}

                    </div>

                </div>

            </div>



            {/* Episodes List */}

            <div className="bg-white rounded-lg shadow-xl p-8 mb-8">

                <h2 className="text-3xl font-bold text-gray-900 mb-6 border-b pb-4">Episodes</h2>

                {story.episodes && story.episodes.length > 0 ? (

                    <ul className="space-y-4">

                        {story.episodes.map(episode => {

                            const progress = getEpisodeProgress(episode.id);

                            const isCompleted = progress?.completed;

                            const lastReadAt = progress?.last_read_at ? new Date(progress.last_read_at).toLocaleString() : 'Never read';



                            return (

                                <li key={episode.id} className="flex items-center justify-between p-4 bg-gray-50 rounded-lg shadow-sm hover:bg-gray-100 transition-colors duration-200">

                                    <div className="flex items-center">

                                        <span className="text-lg font-semibold text-gray-800 mr-4">{episode.order}.</span>

                                        <div>

                                            <Link

                                                to={`/stories/${story.id}/episodes/${episode.id}`}

                                                className="text-xl font-medium text-blue-600 hover:underline"

                                            >

                                                {episode.title}

                                            </Link>

                                            <p className="text-sm text-gray-500">Last read: {lastReadAt}</p>

                                        </div>

                                    </div>

                                    {isCompleted && (

                                        <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">

                                            Completed

                                        </span>

                                    )}

                                </li>

                            );

                        })}

                    </ul>

                ) : (

                    <p className="text-gray-600">No episodes published for this story yet.</p>

                )}

            </div>



            {/* Comments Section */}

            <div className="bg-white rounded-lg shadow-xl p-8">

                <h2 className="text-3xl font-bold text-gray-900 mb-6 border-b pb-4">Comments</h2>



                {isAuthenticated ? (

                    <form onSubmit={handleAddComment} className="mb-8 p-4 bg-gray-50 rounded-lg shadow-inner">

                        <textarea

                            className="w-full p-3 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 resize-y min-h-[100px]"

                            placeholder={replyToCommentId ? `Replying to comment ID ${replyToCommentId}...` : "Write your comment here..."}

                            value={commentText}

                            onChange={(e) => setCommentText(e.target.value)}

                            required

                        ></textarea>

                        <div className="flex justify-end space-x-2 mt-3">

                            {replyToCommentId && (

                                <button

                                    type="button"

                                    onClick={() => { setReplyToCommentId(null); setCommentText(''); }}

                                    className="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition-colors duration-200"

                                >

                                    Cancel Reply

                                </button>

                            )}

                            <button

                                type="submit"

                                className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200"

                            >

                                Add Comment

                            </button>

                        </div>

                    </form>

                ) : (

                    <p className="text-gray-600 mb-8">

                        <Link to="/login" className="text-blue-600 hover:underline font-medium">Log in</Link> to add a comment.

                    </p>

                )}



                {story.comments && story.comments.length > 0 ? (

                    <div className="space-y-6">

                        {story.comments

                            .filter(comment => !comment.parent_id) // Only show top-level comments initially

                            .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt)) // Sort by newest

                            .map(comment => (

                                <div key={comment.id} className="bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200">

                                    <div className="flex items-center justify-between mb-2">

                                        <p className="font-semibold text-gray-800">{comment.User?.name || 'Anonymous'}</p> {/* Assuming User relation is loaded */}

                                        <span className="text-sm text-gray-500">{new Date(comment.createdAt).toLocaleString()}</span>

                                    </div>

                                    <p className="text-gray-700 mb-3">{comment.comment}</p>

                                    <div className="flex space-x-3 text-sm text-gray-500">

                                        <button

                                            onClick={() => { setReplyToCommentId(comment.id); setCommentText(''); }}

                                            className="hover:text-blue-600 font-medium"

                                        >

                                            Reply

                                        </button>

                                        {isAuthenticated && (user?.id === comment.user_id || user?.role === 'admin') && (

                                            <button

                                                onClick={() => handleDeleteComment(comment.id)}

                                                className="hover:text-red-600 font-medium"

                                            >

                                                Delete

                                            </button>

                                        )}

                                    </div>

                                    {/* Render replies */}

                                    <div className="ml-8 mt-4 space-y-4 border-l-2 border-gray-200 pl-4">

                                        {story.comments

                                            .filter(reply => reply.parent_id === comment.id)

                                            .sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt)) // Sort replies by oldest

                                            .map(reply => (

                                                <div key={reply.id} className="bg-gray-100 p-3 rounded-lg shadow-sm">

                                                    <div className="flex items-center justify-between mb-1">

                                                        <p className="font-semibold text-gray-700">{reply.User?.name || 'Anonymous'}</p>

                                                        <span className="text-xs text-gray-500">{new Date(reply.createdAt).toLocaleString()}</span>

                                                    </div>

                                                    <p className="text-gray-600">{reply.comment}</p>

                                                    {isAuthenticated && (user?.id === reply.user_id || user?.role === 'admin') && (

                                                        <button

                                                            onClick={() => handleDeleteComment(reply.id)}

                                                            className="text-xs text-red-500 hover:text-red-700 mt-2"

                                                        >

                                                            Delete

                                                        </button>

                                                    )}

                                                </div>

                                            ))}

                                    </div>

                                </div>

                            ))}

                    </div>

                ) : (

                    <p className="text-gray-600">No comments yet. Be the first to comment!</p>

                )}

            </div>

        </div>

    );

};



export default StoryDetail;

import React, { useState, useEffect, useRef } from 'react';

import { useNavigate } from 'react-router-dom';

import storyService from '../../services/storyService';

import Alert from '../../components/Alert';

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { faUpload, faBookOpen } from '@fortawesome/free-solid-svg-icons'; // Example icons for upload fields



const StoryCreate = () => {

    const navigate = useNavigate();

    const [formData, setFormData] = useState({

        title: '',

        genre_id: '',

        description: '',

        thumbnail: null, // Will store the File object

        price: 0.00,

        content_file: null, // Will store the File object

        is_featured: false,

        is_premium: false,

        age_restriction: null,

        warnings: [],

    });

    const [genres, setGenres] = useState([]);

    const [contentWarnings, setContentWarnings] = useState([]);

    const [loading, setLoading] = useState(true);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');



    // Refs for file inputs to trigger click programmatically

    const thumbnailInputRef = useRef(null);

    const contentFileInputRef = useRef(null);



    useEffect(() => {

        const fetchCreationData = async () => {

            try {

                const data = await storyService.getStoryCreationData();

                console.log('Creation data:', data); // Debug log

                setGenres(data.genres);

                setContentWarnings(data.warnings);

                setLoading(false);

            } catch (err) {

                console.error('Error details:', err.response); // More detailed error

                setMessage(err.response?.data?.message || 'Failed to load necessary data for story creation.');

                setMessageType('error');

                setLoading(false);

            }

        };

        fetchCreationData();

    }, []);



    const handleChange = (e) => {

        const { name, value, type, checked, files } = e.target;



        setFormData((prevData) => ({

            ...prevData,

            [name]: type === 'checkbox' ? checked : (type === 'file' ? files[0] : value),

        }));

    };



    const handleWarningChange = (e) => {

        const { value, checked } = e.target;

        setFormData(prev => ({

            ...prev,

            warnings: checked

                ? [...prev.warnings, parseInt(value)]

                : prev.warnings.filter(warningId => warningId !== parseInt(value)),

        }));

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        // **IMPORTANT:** When sending files, you must use FormData API

        const dataToSend = new FormData();

        for (const key in formData) {

            if (key === 'warnings') {

                // Append each warning ID separately for array handling in Laravel

                formData.warnings.forEach(warningId => {

                    dataToSend.append('warnings[]', warningId);

                });

            } else if (formData[key] !== null) { // Only append if not null

                dataToSend.append(key, formData[key]);

            }

        }



        try {

            const res = await storyService.createStory(dataToSend); // Send FormData

            setMessageType('success');

            setMessage(res.message);

            // Consider resetting form here or navigate

            navigate(`/stories/${res.story.id}`); // Redirect to the new story's detail page

        } catch (err) {

            console.error('Error creating story:', err);

            setMessageType('error');

            setMessage(err.response?.data?.message || 'Failed to create story.');

        } finally {

            setLoading(false);

        }

    };



    if (loading && genres.length === 0 && contentWarnings.length === 0) { // Only show loading spinner if initial data isn't loaded

        return <Alert type="info" message="Loading story creation form..." />;

    }



    return (

        <div className="container mx-auto p-4 animate__animated animate__fadeIn">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center animate__animated animate__fadeInDown">Create New Story</h1>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-xl p-8 space-y-6 max-w-3xl mx-auto animate__animated animate__fadeInUp">

                {/* Title */}

                <div>

                    <label htmlFor="title" className="block text-gray-700 text-sm font-medium mb-2">

                        Title <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="text"

                        id="title"

                        name="title"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.title}

                        onChange={handleChange}

                        required

                    />

                </div>



                {/* Genre */}

                <div>

                    <label htmlFor="genre_id" className="block text-gray-700 text-sm font-medium mb-2">

                        Genre <span className="text-red-500">*</span>

                    </label>

                    <select

                        id="genre_id"

                        name="genre_id"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.genre_id}

                        onChange={handleChange}

                        required

                    >

                        <option value="">Select a Genre</option>

                        {genres.map(genre => (

                            <option key={genre.id} value={genre.id}>{genre.name}</option>

                        ))}

                    </select>

                </div>



                {/* Description */}

                <div>

                    <label htmlFor="description" className="block text-gray-700 text-sm font-medium mb-2">

                        Description <span className="text-red-500">*</span>

                    </label>

                    <textarea

                        id="description"

                        name="description"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 resize-y min-h-[150px]"

                        value={formData.description}

                        onChange={handleChange}

                        required

                    ></textarea>

                </div>



                {/* Thumbnail Upload */}

                <div>

                    <label htmlFor="thumbnail" className="block text-gray-700 text-sm font-medium mb-2">

                        Thumbnail Image <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="file"

                        id="thumbnail"

                        name="thumbnail"

                        accept="image/*" // Accept all image types

                        onChange={handleChange}

                        ref={thumbnailInputRef}

                        className="hidden" // Hide the default file input

                        required

                    />

                    <button

                        type="button"

                        onClick={() => thumbnailInputRef.current.click()}

                        className="w-full bg-gray-200 text-gray-700 py-3 px-4 rounded-lg flex items-center justify-center space-x-2 hover:bg-gray-300 transition-colors duration-200"

                    >

                        <FontAwesomeIcon icon={faUpload} />

                        <span>{formData.thumbnail ? formData.thumbnail.name : 'Choose Thumbnail Image'}</span>

                    </button>

                    {formData.thumbnail && (

                        <p className="mt-2 text-sm text-gray-500">Selected: {formData.thumbnail.name}</p>

                    )}

                </div>



                {/* Content File Upload */}

                <div>

                    <label htmlFor="content_file" className="block text-gray-700 text-sm font-medium mb-2">

                        Story Content File (e.g., .txt, .pdf) <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="file"

                        id="content_file"

                        name="content_file"

                        accept=".txt,.pdf,.docx" // Specify accepted file types

                        onChange={handleChange}

                        ref={contentFileInputRef}

                        className="hidden" // Hide the default file input

                        required

                    />

                     <button

                        type="button"

                        onClick={() => contentFileInputRef.current.click()}

                        className="w-full bg-gray-200 text-gray-700 py-3 px-4 rounded-lg flex items-center justify-center space-x-2 hover:bg-gray-300 transition-colors duration-200"

                    >

                        <FontAwesomeIcon icon={faBookOpen} />

                        <span>{formData.content_file ? formData.content_file.name : 'Choose Story Content File'}</span>

                    </button>

                    {formData.content_file && (

                        <p className="mt-2 text-sm text-gray-500">Selected: {formData.content_file.name}</p>

                    )}

                </div>



                {/* Price */}

                <div>

                    <label htmlFor="price" className="block text-gray-700 text-sm font-medium mb-2">

                        Price (Tokens) <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="number"

                        id="price"

                        name="price"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.price}

                        onChange={handleChange}

                        min="0"

                        step="0.01"

                        required

                    />

                </div>



                {/* Checkboxes: Featured and Premium */}

                <div className="flex items-center space-x-6">

                    <label htmlFor="is_featured" className="flex items-center cursor-pointer">

                        <input

                            type="checkbox"

                            id="is_featured"

                            name="is_featured"

                            className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500"

                            checked={formData.is_featured}

                            onChange={handleChange}

                        />

                        <span className="ml-2 text-gray-700 text-sm">Featured Story</span>

                    </label>

                    <label htmlFor="is_premium" className="flex items-center cursor-pointer">

                        <input

                            type="checkbox"

                            id="is_premium"

                            name="is_premium"

                            className="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500"

                            checked={formData.is_premium}

                            onChange={handleChange}

                        />

                        <span className="ml-2 text-gray-700 text-sm">Premium Content</span>

                    </label>

                </div>



                {/* Age Restriction */}

                <div>

                    <label htmlFor="age_restriction" className="block text-gray-700 text-sm font-medium mb-2">

                        Age Restriction (Optional)

                    </label>

                    <input

                        type="number"

                        id="age_restriction"

                        name="age_restriction"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.age_restriction || ''}

                        onChange={handleChange}

                        min="0"

                    />

                </div>



                {/* Content Warnings */}

                <div>

                    <label className="block text-gray-700 text-sm font-medium mb-2">

                        Content Warnings

                    </label>

                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">

                        {contentWarnings.map(warning => (

                            <label key={warning.id} className="flex items-center cursor-pointer bg-gray-50 p-3 rounded-lg shadow-sm hover:bg-gray-100 transition-colors duration-200">

                                <input

                                    type="checkbox"

                                    name="warnings"

                                    value={warning.id}

                                    checked={formData.warnings.includes(warning.id)}

                                    onChange={handleWarningChange}

                                    className="form-checkbox h-5 w-5 text-red-600 rounded focus:ring-red-500"

                                />

                                <span className="ml-2 text-gray-700 text-sm font-medium">{warning.name}</span>

                            </label>

                        ))}

                    </div>

                </div>



                {/* Submit Button */}

                <button

                    type="submit"

                    className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"

                    disabled={loading}

                >

                    {loading ? 'Publishing...' : 'Publish Story'}

                </button>

            </form>

        </div>

    );

};



export default StoryCreate;



genre



// frontend/src/pages/genres/GenreList.js

import React, { useEffect, useState } from 'react';

import genreService from '../../services/genreService';

import Alert from '../../components/Alert';

import { Link } from 'react-router-dom';



const GenreList = () => {

    const [genres, setGenres] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);



    useEffect(() => {

        const fetchGenres = async () => {

            setLoading(true);

            setError(null);

            try {

                const data = await genreService.getAllGenres();

                setGenres(data);

            } catch (err) {

                console.error('Error fetching genres:', err);

                setError('Failed to load genres. Please try again later.');

            } finally {

                setLoading(false);

            }

        };

        fetchGenres();

    }, []);



    if (loading) return <Alert type="info" message="Loading genres..." />;

    if (error) return <Alert type="error" message={error} />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Explore Genres</h1>



            {genres.length > 0 ? (

                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">

                    {genres.map(genre => (

                        <Link

                            key={genre.id}

                            to={`/genres/${genre.slug}`}

                            className="bg-white rounded-lg shadow-md p-6 text-center transform transition-transform duration-300 hover:scale-105 hover:shadow-xl flex flex-col items-center justify-center"

                        >

                            <h2 className="text-2xl font-semibold text-blue-700 mb-2">{genre.name}</h2>

                            <p className="text-gray-600 text-sm line-clamp-3">{genre.description || 'No description available.'}</p>

                            <span className="mt-4 text-blue-500 hover:underline text-sm font-medium">View Stories</span>

                        </Link>

                    ))}

                </div>

            ) : (

                <div className="bg-white rounded-lg shadow-md p-8 text-center">

                    <p className="text-gray-600 text-lg">No genres found.</p>

                </div>

            )}

        </div>

    );

};



export default GenreList;



// frontend/src/pages/genres/GenreDetail.js

import React, { useEffect, useState } from 'react';

import { useParams } from 'react-router-dom';

import genreService from '../../services/genreService';

import storyService from '../../services/storyService'; // To fetch stories by genre

import Alert from '../../components/Alert';

import StoryCard from '../../components/StoryCard';

import Pagination from '../../components/Pagination';



const GenreDetail = () => {

    const { genreSlug } = useParams();

    const [genre, setGenre] = useState(null);

    const [stories, setStories] = useState([]);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);

    const [currentPage, setCurrentPage] = useState(1);

    const [totalPages, setTotalPages] = useState(1);



    useEffect(() => {

        const fetchGenreDetails = async () => {

            setLoading(true);

            setError(null);

            try {

                // Fetch genre details first

                const genreData = await genreService.getGenreBySlug(genreSlug); // Need to implement this backend route

                setGenre(genreData.genre);



                // Then fetch stories belonging to this genre

                const params = {

                    page: currentPage,

                    limit: 12,

                    genre: genreData.genre.name, // Use genre name for filtering stories

                };

                const storiesData = await storyService.getStories(params);

                setStories(storiesData.stories);

                setCurrentPage(storiesData.currentPage);

                setTotalPages(storiesData.totalPages);



            } catch (err) {

                console.error('Error fetching genre details or stories:', err);

                setError('Failed to load genre details or stories. Please try again later.');

            } finally {

                setLoading(false);

            }

        };

        fetchGenreDetails();

    }, [genreSlug, currentPage]);



    if (loading) return <Alert type="info" message="Loading genre details..." />;

    if (error) return <Alert type="error" message={error} />;

    if (!genre) return <Alert type="info" message="Genre not found." />;



    return (

        <div className="container mx-auto p-4">

            <div className="bg-white rounded-lg shadow-xl p-8 mb-8 text-center">

                <h1 className="text-4xl font-extrabold text-blue-800 mb-4">{genre.name}</h1>

                <p className="text-gray-700 text-lg">{genre.description || 'No description available for this genre.'}</p>

            </div>



            <h2 className="text-3xl font-bold text-gray-900 mb-6 border-b pb-4">Stories in {genre.name}</h2>



            {stories.length > 0 ? (

                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">

                    {stories.map(story => (

                        <StoryCard key={story.id} story={story} />

                    ))}

                </div>

            ) : (

                <div className="bg-white rounded-lg shadow-md p-8 text-center">

                    <p className="text-gray-600 text-lg">No stories found in this genre yet.</p>

                </div>

            )}



            <Pagination

                currentPage={currentPage}

                totalPages={totalPages}

                onPageChange={setCurrentPage}

            />

        </div>

    );

};



export default GenreDetail;



episodes

// frontend/src/pages/episodes/EpisodeCreate.js

import React, { useState, useEffect } from 'react';

import { useParams, useNavigate } from 'react-router-dom';

import episodeService from '../../services/episodeServices';

import Alert from '../../components/Alert';

import { useAuth } from '../../context/AuthContext';



const EpisodeCreate = () => {

    const { storyId } = useParams();

    const navigate = useNavigate();

    const { user } = useAuth();



    const [formData, setFormData] = useState({

        title: '',

        content_file: '', // Assuming URL or text content

        thumbnail: '', // Optional thumbnail URL for episode

        order: '', // Will be pre-filled from backend

    });

    const [story, setStory] = useState(null);

    const [loading, setLoading] = useState(true);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');



    useEffect(() => {

        const fetchCreationData = async () => {

            try {

                const data = await episodeService.getEpisodeCreationData(storyId);

                // Basic authorization check on frontend (backend also enforces)

                if (user && data.story.writer_id !== user.id && user.role !== 'admin') {

                    navigate('/unauthorized'); // Redirect if not authorized

                    return;

                }

                setStory(data.story);

                setFormData(prev => ({

                    ...prev,

                    order: data.nextOrder, // Pre-fill with the next available order

                }));

                setLoading(false);

            } catch (err) {

                console.error('Error fetching episode creation data:', err);

                setMessage(err.response?.data?.message || 'Failed to load data for episode creation.');

                setMessageType('error');

                setLoading(false);

            }

        };

        fetchCreationData();

    }, [storyId, navigate, user]);



    const handleChange = (e) => {

        const { name, value } = e.target;

        setFormData({

            ...formData,

            [name]: value,

        });

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        try {

            const res = await episodeService.createEpisode(storyId, formData);

            setMessageType('success');

            setMessage(res.message);

            navigate(`/stories/${storyId}/episodes/${res.episode.id}`); // Redirect to the new episode

        } catch (err) {

            console.error('Error creating episode:', err);

            setMessageType('error');

            setMessage(err.response?.data?.message || 'Failed to create episode.');

        } finally {

            setLoading(false);

        }

    };



    if (loading) return <Alert type="info" message="Loading episode creation form..." />;

    if (!story) return <Alert type="error" message="Story not found or you are not authorized to add episodes." />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Add New Episode for "{story.title}"</h1>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-xl p-8 space-y-6 max-w-3xl mx-auto">

                <div>

                    <label htmlFor="title" className="block text-gray-700 text-sm font-medium mb-2">

                        Episode Title <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="text"

                        id="title"

                        name="title"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.title}

                        onChange={handleChange}

                        required

                    />

                </div>



                <div>

                    <label htmlFor="content_file" className="block text-gray-700 text-sm font-medium mb-2">

                        Content File URL <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="url"

                        id="content_file"

                        name="content_file"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="https://example.com/episode1.html"

                        value={formData.content_file}

                        onChange={handleChange}

                        required

                    />

                    <p className="text-xs text-gray-500 mt-1">

                        (This URL should point to the episode's content, e.g., a plain text file or HTML.)

                    </p>

                </div>



                <div>

                    <label htmlFor="thumbnail" className="block text-gray-700 text-sm font-medium mb-2">

                        Thumbnail URL (Optional)

                    </label>

                    <input

                        type="url"

                        id="thumbnail"

                        name="thumbnail"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="https://example.com/episode_thumb.jpg"

                        value={formData.thumbnail}

                        onChange={handleChange}

                    />

                </div>



                <div>

                    <label htmlFor="order" className="block text-gray-700 text-sm font-medium mb-2">

                        Order <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="number"

                        id="order"

                        name="order"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.order}

                        onChange={handleChange}

                        min="1"

                        required

                    />

                    <p className="text-xs text-gray-500 mt-1">

                        (This determines the sequence of episodes. Current next available order: {formData.order})

                    </p>

                </div>



                <button

                    type="submit"

                    className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"

                    disabled={loading}

                >

                    {loading ? 'Publishing Episode...' : 'Publish Episode'}

                </button>

            </form>

        </div>

    );

};



export default EpisodeCreate;



// frontend/src/pages/episodes/EpisodeDetail.js

import React, { useEffect, useState } from 'react';

import { useParams, Link, useNavigate } from 'react-router-dom';

import episodeService from '../../services/episodeServices';

import readingProgressService from '../../services/readingProgressService';

import shareService from '../../services/shareService';

import Alert from '../../components/Alert';

import { useAuth } from '../../context/AuthContext';



const EpisodeDetail = () => {

    const { storyId, episodeId } = useParams();

    const navigate = useNavigate();

    const { user, isAuthenticated } = useAuth();



    const [story, setStory] = useState(null);

    const [episode, setEpisode] = useState(null);

    const [nextEpisode, setNextEpisode] = useState(null);

    const [prevEpisode, setPrevEpisode] = useState(null);

    const [loading, setLoading] = useState(true);

    const [error, setError] = useState(null);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');



    useEffect(() => {

        const fetchEpisode = async () => {

            setLoading(true);

            setError(null);

            setMessage(null);

            try {

                const data = await episodeService.getEpisodeById(storyId, episodeId);

                setStory(data.story);

                setEpisode(data.episode);

                setNextEpisode(data.nextEpisode);

                setPrevEpisode(data.prevEpisode);

            } catch (err) {

                console.error('Error fetching episode:', err);

                if (err.response && err.response.status === 403) {

                    setError(err.response.data.message || 'You are not authorized to view this episode. Please purchase the story.');

                } else {

                    setError('Failed to load episode. Please try again later.');

                }

            } finally {

                setLoading(false);

            }

        };

        fetchEpisode();

    }, [storyId, episodeId]); // Re-fetch if storyId or episodeId changes



    const handleMarkAsRead = async () => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to mark episodes as read.');

            return;

        }

        try {

            await readingProgressService.markAsRead(episodeId);

            setMessageType('success');

            setMessage('Episode marked as read!');

            // Optionally, update local state or re-fetch episode to reflect progress

        } catch (err) {

            console.error('Error marking as read:', err);

            setMessageType('error');

            setMessage('Failed to mark episode as read.');

        }

    };



    const handleShareEpisode = async (platform) => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to share episodes.');

            return;

        }

        try {

            const res = await shareService.shareEpisode(storyId, episodeId, platform);

            window.open(res.shareUrl, '_blank');

            setMessageType('success');

            setMessage(`Episode shared on ${platform}!`);

        } catch (err) {

            console.error('Error sharing episode:', err);

            setMessageType('error');

            setMessage('Failed to share episode.');

        }

    };



    const handleDeleteEpisode = async () => {

        if (!isAuthenticated) {

            setMessageType('error');

            setMessage('Please log in to delete episodes.');

            return;

        }

        if (!window.confirm('Are you sure you want to delete this episode?')) {

            return;

        }

        try {

            await episodeService.deleteEpisode(storyId, episodeId);

            setMessageType('success');

            setMessage('Episode deleted successfully!');

            navigate(`/stories/${storyId}`); // Redirect to story detail after deletion

        } catch (err) {

            console.error('Error deleting episode:', err);

            setMessageType('error');

            setMessage(err.response?.data?.message || 'Failed to delete episode.');

        }

    };



    if (loading) return <Alert type="info" message="Loading episode..." />;

    if (error) return <Alert type="error" message={error} />;

    if (!story || !episode) return <Alert type="info" message="Episode or Story not found." />;



    return (

        <div className="container mx-auto p-4">

            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <div className="bg-white rounded-lg shadow-xl p-8 mb-8">

                <nav className="flex items-center justify-between mb-6 border-b pb-4">

                    {prevEpisode ? (

                        <Link

                            to={`/stories/${story.id}/episodes/${prevEpisode.id}`}

                            className="flex items-center text-blue-600 hover:underline font-medium"

                        >

                            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7"></path></svg>

                            Previous Episode

                        </Link>

                    ) : (

                        <span className="text-gray-400">Previous Episode</span>

                    )}

                    <Link

                        to={`/stories/${story.id}`}

                        className="text-gray-700 hover:text-blue-600 transition-colors duration-200 font-medium"

                    >

                        Back to Story

                    </Link>

                    {nextEpisode ? (

                        <Link

                            to={`/stories/${story.id}/episodes/${nextEpisode.id}`}

                            className="flex items-center text-blue-600 hover:underline font-medium"

                        >

                            Next Episode

                            <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7"></path></svg>

                        </Link>

                    ) : (

                        <span className="text-gray-400">Next Episode</span>

                    )}

                </nav>



                <h1 className="text-4xl font-extrabold text-gray-900 mb-2">{episode.title}</h1>

                <p className="text-lg text-gray-600 mb-6">

                    Part of: <Link to={`/stories/${story.id}`} className="text-blue-600 hover:underline">{story.title}</Link>

                </p>



                {/* Episode Content - Assuming content_file is a URL to plain text or HTML */}

                <div className="prose lg:prose-xl max-w-none text-gray-800 leading-relaxed mb-8 p-6 bg-gray-50 rounded-lg shadow-inner">

                    {/* For simplicity, if content_file is a URL, you might fetch and display it here.

                        For now, let's assume it's direct content or a placeholder. */}

                    {episode.content_file ? (

                        <p>

                            Content for this episode would be loaded from: <a href={episode.content_file} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">{episode.content_file}</a>

                            <br />

                            (In a real app, you'd fetch this content and render it, possibly using a markdown renderer or sanitizing HTML)

                        </p>

                    ) : (

                        <p>This is placeholder content for the episode. The actual content would be loaded here.</p>

                    )}

                </div>



                <div className="flex flex-wrap gap-4 justify-center md:justify-start mb-8">

                    <button

                        onClick={handleMarkAsRead}

                        className="px-6 py-3 bg-green-600 text-white font-semibold rounded-lg shadow-md hover:bg-green-700 transition-colors duration-200"

                    >

                        Mark as Read

                    </button>

                    <div className="relative group">

                        <button className="px-6 py-3 bg-indigo-600 text-white font-semibold rounded-lg shadow-md hover:bg-indigo-700 transition-colors duration-200">

                            Share Episode

                        </button>

                        <div className="absolute left-0 mt-2 w-36 bg-white rounded-md shadow-lg py-1 z-10 opacity-0 group-hover:opacity-100 group-hover:visible transition-all duration-200 invisible">

                            <button onClick={() => handleShareEpisode('twitter')} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Twitter</button>

                            <button onClick={() => handleShareEpisode('facebook')} className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Facebook</button>

                        </div>

                    </div>

                </div>



                {/* Writer/Admin Actions */}

                {isAuthenticated && (user?.id === story.writer_id || user?.role === 'admin') && (

                    <div className="mt-6 pt-4 border-t border-gray-200 flex flex-wrap gap-3">

                        <Link

                            to={`/stories/${story.id}/episodes/${episode.id}/edit`}

                            className="px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors duration-200"

                        >

                            Edit Episode

                        </Link>

                        <button

                            onClick={handleDeleteEpisode}

                            className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors duration-200"

                        >

                            Delete Episode

                        </button>

                    </div>

                )}

            </div>

        </div>

    );

};



export default EpisodeDetail;



// frontend/src/pages/episodes/EpisodeEdit.js

import React, { useState, useEffect } from 'react';

import { useParams, useNavigate } from 'react-router-dom';

import episodeService from '../../services/episodeServices';

import Alert from '../../components/Alert';

import { useAuth } from '../../context/AuthContext';



const EpisodeEdit = () => {

    const { storyId, episodeId } = useParams();

    const navigate = useNavigate();

    const { user } = useAuth();



    const [formData, setFormData] = useState({

        title: '',

        content_file: '',

        thumbnail: '',

        order: '',

    });

    const [story, setStory] = useState(null);

    const [loading, setLoading] = useState(true);

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');



    useEffect(() => {

        const fetchEpisodeData = async () => {

            try {

                const data = await episodeService.getEpisodeEditData(storyId, episodeId);

                // Basic authorization check on frontend (backend also enforces)

                if (user && data.story.writer_id !== user.id && user.role !== 'admin') {

                    navigate('/unauthorized'); // Redirect if not authorized

                    return;

                }

                setStory(data.story);

                setFormData({

                    title: data.episode.title,

                    content_file: data.episode.content_file || '',

                    thumbnail: data.episode.thumbnail || '',

                    order: data.episode.order,

                });

                setLoading(false);

            } catch (err) {

                console.error('Error fetching episode data for edit:', err);

                setMessage(err.response?.data?.message || 'Failed to load episode for editing.');

                setMessageType('error');

                setLoading(false);

            }

        };

        fetchEpisodeData();

    }, [storyId, episodeId, navigate, user]);



    const handleChange = (e) => {

        const { name, value } = e.target;

        setFormData({

            ...formData,

            [name]: value,

        });

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        try {

            const res = await episodeService.updateEpisode(storyId, episodeId, formData);

            setMessageType('success');

            setMessage(res.message);

            navigate(`/stories/${storyId}/episodes/${episodeId}`); // Redirect to the updated episode

        } catch (err) {

            console.error('Error updating episode:', err);

            setMessageType('error');

            setMessage(err.response?.data?.message || 'Failed to update episode.');

        } finally {

            setLoading(false);

        }

    };



    if (loading) return <Alert type="info" message="Loading episode for editing..." />;

    if (!story || !formData.title) return <Alert type="error" message="Episode not found or you are not authorized to edit it." />;



    return (

        <div className="container mx-auto p-4">

            <h1 className="text-4xl font-extrabold text-gray-900 mb-8 text-center">Edit Episode: {formData.title}</h1>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <form onSubmit={handleSubmit} className="bg-white rounded-lg shadow-xl p-8 space-y-6 max-w-3xl mx-auto">

                <div>

                    <label htmlFor="title" className="block text-gray-700 text-sm font-medium mb-2">

                        Episode Title <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="text"

                        id="title"

                        name="title"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.title}

                        onChange={handleChange}

                        required

                    />

                </div>



                <div>

                    <label htmlFor="content_file" className="block text-gray-700 text-sm font-medium mb-2">

                        Content File URL <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="url"

                        id="content_file"

                        name="content_file"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="https://example.com/episode1.html"

                        value={formData.content_file}

                        onChange={handleChange}

                        required

                    />

                    <p className="text-xs text-gray-500 mt-1">

                        (This URL should point to the episode's content, e.g., a plain text file or HTML.)

                    </p>

                </div>



                <div>

                    <label htmlFor="thumbnail" className="block text-gray-700 text-sm font-medium mb-2">

                        Thumbnail URL (Optional)

                    </label>

                    <input

                        type="url"

                        id="thumbnail"

                        name="thumbnail"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="https://example.com/episode_thumb.jpg"

                        value={formData.thumbnail}

                        onChange={handleChange}

                    />

                </div>



                <div>

                    <label htmlFor="order" className="block text-gray-700 text-sm font-medium mb-2">

                        Order <span className="text-red-500">*</span>

                    </label>

                    <input

                        type="number"

                        id="order"

                        name="order"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.order}

                        onChange={handleChange}

                        min="1"

                        required

                    />

                </div>



                <button

                    type="submit"

                    className="w-full bg-blue-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"

                    disabled={loading}

                >

                    {loading ? 'Updating Episode...' : 'Update Episode'}

                </button>

            </form>

        </div>

    );

};



export default EpisodeEdit;



auth

import React, { useState, useEffect } from 'react';

import { useNavigate, useSearchParams } from 'react-router-dom';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';



const VerifyEmail = () => {

    const [searchParams] = useSearchParams();

    const { verifyEmail } = useAuth();

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [loading, setLoading] = useState(false);

    const navigate = useNavigate();



    useEffect(() => {

        const token = searchParams.get('token');

        if (token) {

            handleVerification(token);

        }

    }, [searchParams]);



    const handleVerification = async (token) => {

        setLoading(true);

        const result = await verifyEmail(token);

        

        setMessageType(result.success ? 'success' : 'error');

        setMessage(result.message);

        setLoading(false);

        

        if (result.success) {

            setTimeout(() => navigate('/dashboard'), 3000);

        }

    };



    return (

        <div className="flex flex-col items-center justify-center min-h-screen p-4">

            <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Email Verification</h2>

                

                {message ? (

                    <Alert type={messageType} message={message} />

                ) : (

                    <div className="text-center">

                        <p>Verifying your email...</p>

                    </div>

                )}

            </div>

        </div>

    );

};



export default VerifyEmail;



import React, { useState, useEffect } from 'react';

import { useNavigate, useSearchParams } from 'react-router-dom';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';



const ResetPassword = () => {

    const [searchParams] = useSearchParams();

    const { resetPassword } = useAuth();

    const [newPassword, setNewPassword] = useState('');

    const [confirmPassword, setConfirmPassword] = useState('');

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [loading, setLoading] = useState(false);

    const [token, setToken] = useState('');

    const navigate = useNavigate();



    useEffect(() => {

        const tokenParam = searchParams.get('token');

        if (tokenParam) {

            setToken(tokenParam);

        } else {

            setMessageType('error');

            setMessage('Invalid password reset link');

        }

    }, [searchParams]);



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        const result = await resetPassword(token, newPassword, confirmPassword);



        setMessageType(result.success ? 'success' : 'error');

        setMessage(result.message);

        setLoading(false);



        if (result.success) {

            setTimeout(() => navigate('/login'), 3000);

        }

    };



    if (!token) {

        return (

            <div className="flex flex-col items-center justify-center min-h-screen p-4">

                <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                    <Alert type={messageType} message={message} />

                </div>

            </div>

        );

    }



    return (

        <div className="flex flex-col items-center justify-center min-h-screen p-4">

            <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Reset Password</h2>

                

                {message && <Alert type={messageType} message={message} />}



                <form onSubmit={handleSubmit} className="space-y-4">

                    <div>

                        <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700 mb-1">

                            New Password

                        </label>

                        <input

                            type="password"

                            id="newPassword"

                            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"

                            placeholder="Enter new password"

                            value={newPassword}

                            onChange={(e) => setNewPassword(e.target.value)}

                            required

                            minLength="8"

                        />

                    </div>

                    <div>

                        <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-1">

                            Confirm New Password

                        </label>

                        <input

                            type="password"

                            id="confirmPassword"

                            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"

                            placeholder="Confirm new password"

                            value={confirmPassword}

                            onChange={(e) => setConfirmPassword(e.target.value)}

                            required

                            minLength="8"

                        />

                    </div>

                    <button

                        type="submit"

                        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"

                        disabled={loading}

                    >

                        {loading ? 'Resetting...' : 'Reset Password'}

                    </button>

                </form>

            </div>

        </div>

    );

};



export default ResetPassword;



// frontend/src/pages/auth/Register.js

import React, { useState } from 'react';

import { Link, useNavigate } from 'react-router-dom';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';



const Register = () => {

    const [formData, setFormData] = useState({

        name: '',

        email: '',

        password: '',

        password_confirmation: '', // For frontend validation, not sent to backend

        role: 'user', // Default role

    });

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [loading, setLoading] = useState(false);

    const { register } = useAuth();

    const navigate = useNavigate();



    const handleChange = (e) => {

        setFormData({ ...formData, [e.target.name]: e.target.value });

    };



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        if (formData.password !== formData.password_confirmation) {

            setMessageType('error');

            setMessage('Passwords do not match.');

            setLoading(false);

            return;

        }



        // Destructure to omit password_confirmation before sending

        const { password_confirmation, ...dataToSend } = formData;



        const result = await register(dataToSend);



        if (result.success) {

            setMessageType('success');

            setMessage(result.message);

            navigate('/dashboard'); // Redirect after successful registration

        } else {

            setMessageType('error');

            setMessage(result.message);

        }

        setLoading(false);

    };



    return (

        <div className="flex flex-col items-center justify-center">

            <h2 className="text-3xl font-bold text-gray-800 mb-6">Create Your Account</h2>



            {message && <Alert type={messageType} message={message} onClose={() => setMessage(null)} />}



            <form onSubmit={handleSubmit} className="w-full space-y-5">

                <div>

                    <label htmlFor="name" className="block text-gray-700 text-sm font-medium mb-2">

                        Full Name

                    </label>

                    <input

                        type="text"

                        id="name"

                        name="name"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="John Doe"

                        value={formData.name}

                        onChange={handleChange}

                        required

                    />

                </div>

                <div>

                    <label htmlFor="email" className="block text-gray-700 text-sm font-medium mb-2">

                        Email Address

                    </label>

                    <input

                        type="email"

                        id="email"

                        name="email"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="your@example.com"

                        value={formData.email}

                        onChange={handleChange}

                        required

                    />

                </div>

                <div>

                    <label htmlFor="password" className="block text-gray-700 text-sm font-medium mb-2">

                        Password

                    </label>

                    <input

                        type="password"

                        id="password"

                        name="password"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="********"

                        value={formData.password}

                        onChange={handleChange}

                        required

                    />

                </div>

                <div>

                    <label htmlFor="password_confirmation" className="block text-gray-700 text-sm font-medium mb-2">

                        Confirm Password

                    </label>

                    <input

                        type="password"

                        id="password_confirmation"

                        name="password_confirmation"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        placeholder="********"

                        value={formData.password_confirmation}

                        onChange={handleChange}

                        required

                    />

                </div>

                <div>

                    <label htmlFor="role" className="block text-gray-700 text-sm font-medium mb-2">

                        Register As

                    </label>

                    <select

                        id="role"

                        name="role"

                        className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"

                        value={formData.role}

                        onChange={handleChange}

                    >

                        <option value="user">Reader</option>

                        <option value="writer">Writer</option>

                    </select>

                </div>

                <button

                    type="submit"

                    className="w-full bg-green-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-green-700 transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"

                    disabled={loading}

                >

                    {loading ? 'Registering...' : 'Register'}

                </button>

            </form>



            <p className="mt-6 text-gray-600 text-sm">

                Already have an account?{' '}

                <Link to="/login" className="text-blue-600 hover:underline font-medium">

                    Login here

                </Link>

            </p>

        </div>

    );

};



export default Register;



import React, { useState } from 'react';

import { Link, useNavigate } from 'react-router-dom';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';



const Login = () => {

    const [email, setEmail] = useState('');

    const [password, setPassword] = useState('');

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [loading, setLoading] = useState(false);

    const { login, error } = useAuth();

    const navigate = useNavigate();



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        const result = await login(email, password);



        if (result.success) {

            setMessageType('success');

            setMessage(result.message);

            navigate('/dashboard');

        } else {

            setMessageType('error');

            setMessage(result.message);

        }

        setLoading(false);

    };



    return (

            <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Welcome Back!</h2>



                {message && <Alert type={messageType} message={message} />}

                {error && <Alert type="error" message={error} />}



                <form onSubmit={handleSubmit} className="space-y-4">

                    <div>

                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">

                            Email Address

                        </label>

                        <input

                            type="email"

                            id="email"

                            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"

                            placeholder="your@example.com"

                            value={email}

                            onChange={(e) => setEmail(e.target.value)}

                            required

                        />

                    </div>

                    <div>

                        <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-1">

                            Password

                        </label>

                        <input

                            type="password"

                            id="password"

                            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"

                            placeholder="********"

                            value={password}

                            onChange={(e) => setPassword(e.target.value)}

                            required

                        />

                    </div>

                    <div className="flex items-center justify-between">

                        <div className="text-sm">

                            <Link to="/forgot-password" className="font-medium text-blue-600 hover:underline">

                                Forgot password?

                            </Link>

                        </div>

                    </div>

                    <button

                        type="submit"

                        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"

                        disabled={loading}

                    >

                        {loading ? 'Logging In...' : 'Login'}

                    </button>

                </form>



                <div className="mt-4 text-center text-sm text-gray-600">

                    Don't have an account?{' '}

                    <Link to="/register" className="font-medium text-blue-600 hover:underline">

                        Register here

                    </Link>

                </div>

            </div>

    );

};



export default Login;



import React, { useState } from 'react';

import { Link, useNavigate } from 'react-router-dom';

import { useAuth } from '../../context/AuthContext';

import Alert from '../../components/Alert';



const ForgotPassword = () => {

    const [email, setEmail] = useState('');

    const [message, setMessage] = useState(null);

    const [messageType, setMessageType] = useState('');

    const [loading, setLoading] = useState(false);

    const { forgotPassword } = useAuth();

    const navigate = useNavigate();



    const handleSubmit = async (e) => {

        e.preventDefault();

        setLoading(true);

        setMessage(null);



        const result = await forgotPassword(email);



        setMessageType(result.success ? 'success' : 'error');

        setMessage(result.message);

        setLoading(false);



        if (result.success) {

            setTimeout(() => navigate('/login'), 5000);

        }

    };



    return (

            <div className="w-full max-w-md p-8 bg-white rounded-lg shadow-md">

                <h2 className="text-2xl font-bold text-center text-gray-800 mb-6">Forgot Password</h2>

                

                {message && <Alert type={messageType} message={message} />}



                <form onSubmit={handleSubmit} className="space-y-4">

                    <div>

                        <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">

                            Email Address

                        </label>

                        <input

                            type="email"

                            id="email"

                            className="w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"

                            placeholder="your@example.com"

                            value={email}

                            onChange={(e) => setEmail(e.target.value)}

                            required

                        />

                    </div>

                    <button

                        type="submit"

                        className="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"

                        disabled={loading}

                    >

                        {loading ? 'Sending...' : 'Send Reset Link'}

                    </button>

                </form>



                <div className="mt-4 text-center text-sm text-gray-600">

                    Remember your password?{' '}

                    <Link to="/login" className="text-blue-600 hover:underline">

                        Login here

                    </Link>

                </div>

            </div>

    );

};



export default ForgotPassword;



fix what needs to be fixed to correspond/interact with the backend above. instead of using the dashboard under the users directory, utilize userdashboardlayout. If a user is not verified and still proceeds to login display the message in the alert component telling them to check thier email to verify they account/email address. Also, I would lke to upload an image for the user profile picture and for the story and episode thumbnail, and also upload  txt/docx/pdf file for the content_file for the story and episode If I am missing anything else, please provide it, so that I can deploy this application this evening. I will provide the backend below1